
tp4-ent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000029a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8a  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f5  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e5  00000000  00000000  00001853  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ac  00000000  00000000  00001fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ca  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002622  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6f 00 	call	0xde	; 0xde <main>
  88:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_read>:
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
}

uint16_t ADC_read(uint8_t channel) {
	// Select ADC Channel. Channel must be 0-7. Channel will always be ADC3.
	ADMUX &= 0xF0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	90 81       	ld	r25, Z
  96:	90 7f       	andi	r25, 0xF0	; 240
  98:	90 83       	st	Z, r25
	ADMUX |= channel;
  9a:	90 81       	ld	r25, Z
  9c:	89 2b       	or	r24, r25
  9e:	80 83       	st	Z, r24

	// Start Single conversion
	ADCSRA |= (1 << ADSC);
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
	
	// Wait for conversion to complete
	while((ADCSRA&(1<<ADIF))==0);
  aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ae:	84 ff       	sbrs	r24, 4
  b0:	fc cf       	rjmp	.-8      	; 0xaa <ADC_read+0x1a>

	// Clear the flag
	ADCSRA |= (1<<ADIF);
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	80 83       	st	Z, r24
	
	return ADC;
  bc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  c0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	
}
  c4:	08 95       	ret

000000c6 <RGB_setBrightness>:

#include "rgb.h"
#include "adc.h"

void RGB_setBrightness() {
	uint16_t adc_value = ADC_read(3); // Read ADC value from ADC3 (PC3)
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	0e 94 48 00 	call	0x90	; 0x90 <ADC_read>
	uint8_t brightness = adc_value / 4; // Scale ADC value (0-1023) to PWM value (0-255)
  cc:	96 95       	lsr	r25
  ce:	87 95       	ror	r24
  d0:	96 95       	lsr	r25
  d2:	87 95       	ror	r24

	RGB_setColor(brightness, brightness, brightness); // Set brightness for all colors
  d4:	48 2f       	mov	r20, r24
  d6:	68 2f       	mov	r22, r24
  d8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <RGB_setColor>
  dc:	08 95       	ret

000000de <main>:
}


int main(void){
	
	RGB_init();
  de:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <RGB_init>
	sei();
  e2:	78 94       	sei
	
	RGB_setColor(0,0,0);
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 fe 00 	call	0x1fc	; 0x1fc <RGB_setColor>

	
	
	while(1){
		
		RGB_setBrightness();
  ee:	0e 94 63 00 	call	0xc6	; 0xc6 <RGB_setBrightness>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	8f e1       	ldi	r24, 0x1F	; 31
  f4:	9e e4       	ldi	r25, 0x4E	; 78
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x18>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x1e>
  fc:	00 00       	nop
  fe:	f7 cf       	rjmp	.-18     	; 0xee <main+0x10>

00000100 <PWM_init>:
volatile uint8_t green_duty = 0;
volatile uint8_t blue_duty = 0;

void PWM_init() {
	
	PWM_START(RED_PIN);
 100:	84 b1       	in	r24, 0x04	; 4
 102:	84 60       	ori	r24, 0x04	; 4
 104:	84 b9       	out	0x04, r24	; 4
	PWM_START(GREEN_PIN);
 106:	84 b1       	in	r24, 0x04	; 4
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	84 b9       	out	0x04, r24	; 4
	PWM_START(BLUE_PIN);
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	84 b9       	out	0x04, r24	; 4
	
	TCCR0A |= (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
 112:	84 b5       	in	r24, 0x24	; 36
 114:	83 68       	ori	r24, 0x83	; 131
 116:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) | (1<<CS00);
 118:	85 b5       	in	r24, 0x25	; 37
 11a:	83 60       	ori	r24, 0x03	; 3
 11c:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1<<OCIE0A);
 122:	ee e6       	ldi	r30, 0x6E	; 110
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	80 83       	st	Z, r24
 12c:	08 95       	ret

0000012e <PWM_setDutyCycle>:
}

void PWM_setDutyCycle(uint8_t pin, uint8_t dutyCycle) {
	if (pin == RED_PIN) {
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	19 f4       	brne	.+6      	; 0x138 <PWM_setDutyCycle+0xa>
		red_duty = dutyCycle;
 132:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <red_duty>
 136:	08 95       	ret
		} else if (pin == GREEN_PIN) {
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	19 f4       	brne	.+6      	; 0x142 <PWM_setDutyCycle+0x14>
		green_duty = dutyCycle;
 13c:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <green_duty>
 140:	08 95       	ret
		} else if (pin == BLUE_PIN) {
 142:	85 30       	cpi	r24, 0x05	; 5
 144:	11 f4       	brne	.+4      	; 0x14a <PWM_setDutyCycle+0x1c>
		blue_duty = dutyCycle;
 146:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <blue_duty>
 14a:	08 95       	ret

0000014c <PWM_soft_update>:
	}
}

void PWM_soft_update() {
	static uint8_t PWM_position = 0;
	if (++PWM_position >= PWM_PERIOD) {
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	84 31       	cpi	r24, 0x14	; 20
 158:	10 f0       	brcs	.+4      	; 0x15e <PWM_soft_update+0x12>
		PWM_position = 0;
 15a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}

	// Update RED_PIN
	if (PWM_position < red_duty) {
 15e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <red_duty>
 166:	98 17       	cp	r25, r24
 168:	20 f4       	brcc	.+8      	; 0x172 <PWM_soft_update+0x26>
		PWM_ON(RED_PIN);
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	85 b9       	out	0x05, r24	; 5
 170:	03 c0       	rjmp	.+6      	; 0x178 <PWM_soft_update+0x2c>
		} else {
		PWM_OFF(RED_PIN);
 172:	85 b1       	in	r24, 0x05	; 5
 174:	8b 7f       	andi	r24, 0xFB	; 251
 176:	85 b9       	out	0x05, r24	; 5
	}

	// Update GREEN_PIN
	if (PWM_position < green_duty) {
 178:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <green_duty>
 180:	98 17       	cp	r25, r24
 182:	20 f4       	brcc	.+8      	; 0x18c <PWM_soft_update+0x40>
		PWM_ON(GREEN_PIN);
 184:	85 b1       	in	r24, 0x05	; 5
 186:	82 60       	ori	r24, 0x02	; 2
 188:	85 b9       	out	0x05, r24	; 5
 18a:	03 c0       	rjmp	.+6      	; 0x192 <PWM_soft_update+0x46>
		} else {
		PWM_OFF(GREEN_PIN);
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	8d 7f       	andi	r24, 0xFD	; 253
 190:	85 b9       	out	0x05, r24	; 5
	}

	// Update BLUE_PIN
	if (PWM_position < blue_duty) {
 192:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 196:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <blue_duty>
 19a:	98 17       	cp	r25, r24
 19c:	20 f4       	brcc	.+8      	; 0x1a6 <PWM_soft_update+0x5a>
		PWM_ON(BLUE_PIN);
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	80 62       	ori	r24, 0x20	; 32
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	08 95       	ret
		} else {
		PWM_OFF(BLUE_PIN);
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	8f 7d       	andi	r24, 0xDF	; 223
 1aa:	85 b9       	out	0x05, r24	; 5
 1ac:	08 95       	ret

000001ae <__vector_14>:
	}
}

// ISR for Timer0 compare match
ISR(TIMER0_COMPA_vect) {
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
	PWM_soft_update();
 1d0:	0e 94 a6 00 	call	0x14c	; 0x14c <PWM_soft_update>
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <RGB_init>:
#include "rgb.h"
#include "pwm.h"

void RGB_init() {
	PWM_init();
 1f6:	0e 94 80 00 	call	0x100	; 0x100 <PWM_init>
 1fa:	08 95       	ret

000001fc <RGB_setColor>:
}

void RGB_setColor(uint8_t red, uint8_t green, uint8_t blue) {
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	d6 2f       	mov	r29, r22
 202:	c4 2f       	mov	r28, r20
	PWM_setDutyCycle(PORTB2, red);
 204:	68 2f       	mov	r22, r24
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	0e 94 97 00 	call	0x12e	; 0x12e <PWM_setDutyCycle>
	PWM_setDutyCycle(PORTB1, green);
 20c:	6d 2f       	mov	r22, r29
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 97 00 	call	0x12e	; 0x12e <PWM_setDutyCycle>
	PWM_setDutyCycle(PORTB5, blue);
 214:	6c 2f       	mov	r22, r28
 216:	85 e0       	ldi	r24, 0x05	; 5
 218:	0e 94 97 00 	call	0x12e	; 0x12e <PWM_setDutyCycle>
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
