
tp4-ent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009cb  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fb  00000000  00000000  000014e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  000018e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040c  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017e  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001f9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:



int main(void){
	
	RGB_init();
  90:	0e 94 cc 00 	call	0x198	; 0x198 <RGB_init>
	sei();
  94:	78 94       	sei
	
	RGB_setColor(255,0,255);
  96:	4f ef       	ldi	r20, 0xFF	; 255
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	0e 94 cf 00 	call	0x19e	; 0x19e <RGB_setColor>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x10>

000000a2 <PWM_init>:
volatile uint8_t green_duty = 0;
volatile uint8_t blue_duty = 0;

void PWM_init() {
	
	PWM_START(RED_PIN);
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	84 b9       	out	0x04, r24	; 4
	PWM_START(GREEN_PIN);
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	84 b9       	out	0x04, r24	; 4
	PWM_START(BLUE_PIN);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	84 b9       	out	0x04, r24	; 4
	
	TCCR0A |= (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
  b4:	84 b5       	in	r24, 0x24	; 36
  b6:	83 68       	ori	r24, 0x83	; 131
  b8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) | (1<<CS00);
  ba:	85 b5       	in	r24, 0x25	; 37
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;
  c0:	89 ef       	ldi	r24, 0xF9	; 249
  c2:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1<<OCIE0A);
  c4:	ee e6       	ldi	r30, 0x6E	; 110
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <PWM_setDutyCycle>:
}

void PWM_setDutyCycle(uint8_t pin, uint8_t dutyCycle) {
	if (pin == RED_PIN) {
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	19 f4       	brne	.+6      	; 0xda <PWM_setDutyCycle+0xa>
		red_duty = dutyCycle;
  d4:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <red_duty>
  d8:	08 95       	ret
		} else if (pin == GREEN_PIN) {
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	19 f4       	brne	.+6      	; 0xe4 <PWM_setDutyCycle+0x14>
		green_duty = dutyCycle;
  de:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <green_duty>
  e2:	08 95       	ret
		} else if (pin == BLUE_PIN) {
  e4:	85 30       	cpi	r24, 0x05	; 5
  e6:	11 f4       	brne	.+4      	; 0xec <PWM_setDutyCycle+0x1c>
		blue_duty = dutyCycle;
  e8:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <blue_duty>
  ec:	08 95       	ret

000000ee <PWM_soft_update>:
	}
}

void PWM_soft_update() {
	static uint8_t PWM_position = 0;
	if (++PWM_position >= PWM_PERIOD) {
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f8:	84 31       	cpi	r24, 0x14	; 20
  fa:	10 f0       	brcs	.+4      	; 0x100 <PWM_soft_update+0x12>
		PWM_position = 0;
  fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}

	// Update RED_PIN
	if (PWM_position < red_duty) {
 100:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 104:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <red_duty>
 108:	98 17       	cp	r25, r24
 10a:	20 f4       	brcc	.+8      	; 0x114 <PWM_soft_update+0x26>
		PWM_ON(RED_PIN);
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	85 b9       	out	0x05, r24	; 5
 112:	03 c0       	rjmp	.+6      	; 0x11a <PWM_soft_update+0x2c>
		} else {
		PWM_OFF(RED_PIN);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	8b 7f       	andi	r24, 0xFB	; 251
 118:	85 b9       	out	0x05, r24	; 5
	}

	// Update GREEN_PIN
	if (PWM_position < green_duty) {
 11a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 11e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <green_duty>
 122:	98 17       	cp	r25, r24
 124:	20 f4       	brcc	.+8      	; 0x12e <PWM_soft_update+0x40>
		PWM_ON(GREEN_PIN);
 126:	85 b1       	in	r24, 0x05	; 5
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	85 b9       	out	0x05, r24	; 5
 12c:	03 c0       	rjmp	.+6      	; 0x134 <PWM_soft_update+0x46>
		} else {
		PWM_OFF(GREEN_PIN);
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	85 b9       	out	0x05, r24	; 5
	}

	// Update BLUE_PIN
	if (PWM_position < blue_duty) {
 134:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 138:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <blue_duty>
 13c:	98 17       	cp	r25, r24
 13e:	20 f4       	brcc	.+8      	; 0x148 <PWM_soft_update+0x5a>
		PWM_ON(BLUE_PIN);
 140:	85 b1       	in	r24, 0x05	; 5
 142:	80 62       	ori	r24, 0x20	; 32
 144:	85 b9       	out	0x05, r24	; 5
 146:	08 95       	ret
		} else {
		PWM_OFF(BLUE_PIN);
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	8f 7d       	andi	r24, 0xDF	; 223
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	08 95       	ret

00000150 <__vector_14>:
	}
}

// ISR for Timer0 compare match
ISR(TIMER0_COMPA_vect) {
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	PWM_soft_update();
 172:	0e 94 77 00 	call	0xee	; 0xee <PWM_soft_update>
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <RGB_init>:
#include "rgb.h"
#include "pwm.h"

void RGB_init() {
	PWM_init();
 198:	0e 94 51 00 	call	0xa2	; 0xa2 <PWM_init>
 19c:	08 95       	ret

0000019e <RGB_setColor>:
}

void RGB_setColor(uint8_t red, uint8_t green, uint8_t blue) {
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	d6 2f       	mov	r29, r22
 1a4:	c4 2f       	mov	r28, r20
	PWM_setDutyCycle(PORTB2, red);
 1a6:	68 2f       	mov	r22, r24
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0e 94 68 00 	call	0xd0	; 0xd0 <PWM_setDutyCycle>
	PWM_setDutyCycle(PORTB1, green);
 1ae:	6d 2f       	mov	r22, r29
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 68 00 	call	0xd0	; 0xd0 <PWM_setDutyCycle>
	PWM_setDutyCycle(PORTB5, blue);
 1b6:	6c 2f       	mov	r22, r28
 1b8:	85 e0       	ldi	r24, 0x05	; 5
 1ba:	0e 94 68 00 	call	0xd0	; 0xd0 <PWM_setDutyCycle>
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
