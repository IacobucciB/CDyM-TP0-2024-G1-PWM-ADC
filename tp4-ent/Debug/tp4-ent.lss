
tp4-ent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000a7e  00000b12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  00800166  00800166  00000b78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b0  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4d  00000000  00000000  0000226c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b6a  00000000  00000000  00002eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c0  00000000  00000000  00003a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078b  00000000  00000000  00003de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088b  00000000  00000000  0000456f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004dfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 00 02 	jmp	0x400	; 0x400 <__vector_18>
  4c:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e6       	ldi	r26, 0x66	; 102
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3d       	cpi	r26, 0xDC	; 220
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  9e:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 68       	ori	r24, 0x86	; 134
  ae:	80 83       	st	Z, r24
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
  ba:	80 81       	ld	r24, Z
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <ADC_read>:
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	80 83       	st	Z, r24
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
  dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e0:	84 ff       	sbrs	r24, 4
  e2:	fc cf       	rjmp	.-8      	; 0xdc <ADC_read+0x1a>
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	80 83       	st	Z, r24
  ee:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	98 2f       	mov	r25, r24
  fa:	88 27       	eor	r24, r24
  fc:	82 2b       	or	r24, r18
  fe:	08 95       	ret

00000100 <RGB_setBrightness>:
//static char novalido[] = "ERROR: Comando no valido\n\r";
static char str[4];

// Function to set brightness based on ADC reading
uint8_t RGB_setBrightness() {
	uint16_t adc_value = ADC_read(3); // Leer valor del potenciómetro conectado al ADC3 (PC3)
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_read>
	uint8_t brightness = adc_value / 4; // Escalar el valor ADC (0-1023) a PWM (0-255)
 106:	96 95       	lsr	r25
 108:	87 95       	ror	r24
 10a:	96 95       	lsr	r25
 10c:	87 95       	ror	r24
	return brightness;
}
 10e:	08 95       	ret

00000110 <processCommand>:

// Function to process UART command and set corresponding color
void processCommand(char channel) {
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	c8 2f       	mov	r28, r24
	uint8_t brightness = RGB_setBrightness();
 116:	0e 94 80 00 	call	0x100	; 0x100 <RGB_setBrightness>
 11a:	d8 2f       	mov	r29, r24
	switch (channel) {
 11c:	c7 34       	cpi	r28, 0x47	; 71
 11e:	61 f0       	breq	.+24     	; 0x138 <processCommand+0x28>
 120:	c2 35       	cpi	r28, 0x52	; 82
 122:	19 f0       	breq	.+6      	; 0x12a <processCommand+0x1a>
 124:	c2 34       	cpi	r28, 0x42	; 66
 126:	79 f5       	brne	.+94     	; 0x186 <processCommand+0x76>
 128:	0e c0       	rjmp	.+28     	; 0x146 <processCommand+0x36>
		case 'R':
		RGB_setRed();
 12a:	0e 94 94 01 	call	0x328	; 0x328 <RGB_setRed>
		UART_sendString("R");
 12e:	8a e5       	ldi	r24, 0x5A	; 90
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_sendString>
		break;
 136:	0d c0       	rjmp	.+26     	; 0x152 <processCommand+0x42>
		case 'G':
		RGB_setGreen();
 138:	0e 94 9a 01 	call	0x334	; 0x334 <RGB_setGreen>
		UART_sendString("G");
 13c:	8c e5       	ldi	r24, 0x5C	; 92
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_sendString>
		break;
 144:	06 c0       	rjmp	.+12     	; 0x152 <processCommand+0x42>
		case 'B':
		RGB_setBlue();
 146:	0e 94 a0 01 	call	0x340	; 0x340 <RGB_setBlue>
		UART_sendString("B");
 14a:	8e e5       	ldi	r24, 0x5E	; 94
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_sendString>
		// UART_sendString(novalido);
		return;
	}
	// Send brightness value as string
	
	sprintf(str, "%u", brightness);
 152:	1f 92       	push	r1
 154:	df 93       	push	r29
 156:	80 e6       	ldi	r24, 0x60	; 96
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	9f 93       	push	r25
 15c:	8f 93       	push	r24
 15e:	86 e6       	ldi	r24, 0x66	; 102
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	9f 93       	push	r25
 164:	8f 93       	push	r24
 166:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sprintf>
	UART_sendString(str);
 16a:	86 e6       	ldi	r24, 0x66	; 102
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_sendString>
	UART_sendString("\n\r");
 172:	83 e6       	ldi	r24, 0x63	; 99
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_sendString>
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
	
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <main>:

int main(void) {
	DDRC = 0x00; // Set PORTC as input
 18c:	17 b8       	out	0x07, r1	; 7
	UART_init();
 18e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <UART_init>
	RGB_init();
 192:	0e 94 7e 01 	call	0x2fc	; 0x2fc <RGB_init>
	ADC_init();
 196:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	sei(); // Enable global interrupts
 19a:	78 94       	sei

	// Initial RGB color setup
	RGB_setRed();
 19c:	0e 94 94 01 	call	0x328	; 0x328 <RGB_setRed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	81 ee       	ldi	r24, 0xE1	; 225
 1a4:	94 e0       	ldi	r25, 0x04	; 4
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x1a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x24>
 1b0:	00 00       	nop
	_delay_ms(100);
	RGB_setGreen();
 1b2:	0e 94 9a 01 	call	0x334	; 0x334 <RGB_setGreen>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	81 ee       	ldi	r24, 0xE1	; 225
 1ba:	94 e0       	ldi	r25, 0x04	; 4
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x30>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x3a>
 1c6:	00 00       	nop
	_delay_ms(100);
	RGB_setBlue();
 1c8:	0e 94 a0 01 	call	0x340	; 0x340 <RGB_setBlue>
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	81 ee       	ldi	r24, 0xE1	; 225
 1d0:	94 e0       	ldi	r25, 0x04	; 4
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x46>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x50>
 1dc:	00 00       	nop
	_delay_ms(100);
	RGB_setColor(255, 255, 255);
 1de:	4f ef       	ldi	r20, 0xFF	; 255
 1e0:	6f ef       	ldi	r22, 0xFF	; 255
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	0e 94 81 01 	call	0x302	; 0x302 <RGB_setColor>

	// Send welcome message
	UART_sendString(bienvenida);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_sendString>

	while(1) {
		if (UART_hayComando()) {
 1f0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <UART_hayComando>
 1f4:	88 23       	and	r24, r24
 1f6:	e1 f3       	breq	.-8      	; 0x1f0 <main+0x64>
			char channel = UART_getComando();
 1f8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <UART_getComando>
			processCommand(channel);
 1fc:	0e 94 88 00 	call	0x110	; 0x110 <processCommand>
			UART_setHayComando();
 200:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <UART_setHayComando>
 204:	f5 cf       	rjmp	.-22     	; 0x1f0 <main+0x64>

00000206 <PWM_init>:
 206:	84 b1       	in	r24, 0x04	; 4
 208:	80 62       	ori	r24, 0x20	; 32
 20a:	84 b9       	out	0x04, r24	; 4
 20c:	84 b1       	in	r24, 0x04	; 4
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	84 b9       	out	0x04, r24	; 4
 212:	84 b1       	in	r24, 0x04	; 4
 214:	84 60       	ori	r24, 0x04	; 4
 216:	84 b9       	out	0x04, r24	; 4
 218:	84 b5       	in	r24, 0x24	; 36
 21a:	83 68       	ori	r24, 0x83	; 131
 21c:	84 bd       	out	0x24, r24	; 36
 21e:	85 b5       	in	r24, 0x25	; 37
 220:	82 60       	ori	r24, 0x02	; 2
 222:	85 bd       	out	0x25, r24	; 37
 224:	8b e3       	ldi	r24, 0x3B	; 59
 226:	87 bd       	out	0x27, r24	; 39
 228:	ee e6       	ldi	r30, 0x6E	; 110
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	82 60       	ori	r24, 0x02	; 2
 230:	80 83       	st	Z, r24
 232:	08 95       	ret

00000234 <PWM_setDutyCycle>:
 234:	85 30       	cpi	r24, 0x05	; 5
 236:	19 f4       	brne	.+6      	; 0x23e <PWM_setDutyCycle+0xa>
 238:	60 93 6d 01 	sts	0x016D, r22	; 0x80016d <red_duty>
 23c:	08 95       	ret
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	19 f4       	brne	.+6      	; 0x248 <PWM_setDutyCycle+0x14>
 242:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <green_duty>
 246:	08 95       	ret
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	11 f4       	brne	.+4      	; 0x250 <PWM_setDutyCycle+0x1c>
 24c:	60 93 6b 01 	sts	0x016B, r22	; 0x80016b <blue_duty>
 250:	08 95       	ret

00000252 <PWM_soft_update>:
 252:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <PWM_position.1617>
 256:	8f 5f       	subi	r24, 0xFF	; 255
 258:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <PWM_position.1617>
 25c:	86 39       	cpi	r24, 0x96	; 150
 25e:	10 f0       	brcs	.+4      	; 0x264 <PWM_soft_update+0x12>
 260:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <PWM_position.1617>
 264:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <PWM_position.1617>
 268:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <red_duty>
 26c:	98 17       	cp	r25, r24
 26e:	20 f4       	brcc	.+8      	; 0x278 <PWM_soft_update+0x26>
 270:	85 b1       	in	r24, 0x05	; 5
 272:	80 62       	ori	r24, 0x20	; 32
 274:	85 b9       	out	0x05, r24	; 5
 276:	03 c0       	rjmp	.+6      	; 0x27e <PWM_soft_update+0x2c>
 278:	85 b1       	in	r24, 0x05	; 5
 27a:	8f 7d       	andi	r24, 0xDF	; 223
 27c:	85 b9       	out	0x05, r24	; 5
 27e:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <PWM_position.1617>
 282:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <green_duty>
 286:	98 17       	cp	r25, r24
 288:	20 f4       	brcc	.+8      	; 0x292 <PWM_soft_update+0x40>
 28a:	85 b1       	in	r24, 0x05	; 5
 28c:	82 60       	ori	r24, 0x02	; 2
 28e:	85 b9       	out	0x05, r24	; 5
 290:	03 c0       	rjmp	.+6      	; 0x298 <PWM_soft_update+0x46>
 292:	85 b1       	in	r24, 0x05	; 5
 294:	8d 7f       	andi	r24, 0xFD	; 253
 296:	85 b9       	out	0x05, r24	; 5
 298:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <PWM_position.1617>
 29c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <blue_duty>
 2a0:	98 17       	cp	r25, r24
 2a2:	20 f4       	brcc	.+8      	; 0x2ac <PWM_soft_update+0x5a>
 2a4:	85 b1       	in	r24, 0x05	; 5
 2a6:	84 60       	ori	r24, 0x04	; 4
 2a8:	85 b9       	out	0x05, r24	; 5
 2aa:	08 95       	ret
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	8b 7f       	andi	r24, 0xFB	; 251
 2b0:	85 b9       	out	0x05, r24	; 5
 2b2:	08 95       	ret

000002b4 <__vector_14>:
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
 2d6:	0e 94 29 01 	call	0x252	; 0x252 <PWM_soft_update>
 2da:	ff 91       	pop	r31
 2dc:	ef 91       	pop	r30
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	7f 91       	pop	r23
 2e8:	6f 91       	pop	r22
 2ea:	5f 91       	pop	r21
 2ec:	4f 91       	pop	r20
 2ee:	3f 91       	pop	r19
 2f0:	2f 91       	pop	r18
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <RGB_init>:
		break;
		case 'G':
		PWM_setDutyCycle(PORTB1, color);
		break;
		case 'B':
		PWM_setDutyCycle(PORTB2, color);
 2fc:	0e 94 03 01 	call	0x206	; 0x206 <PWM_init>
 300:	08 95       	ret

00000302 <RGB_setColor>:
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	c8 2f       	mov	r28, r24
 308:	d6 2f       	mov	r29, r22
 30a:	64 2f       	mov	r22, r20
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	0e 94 1a 01 	call	0x234	; 0x234 <PWM_setDutyCycle>
 312:	6d 2f       	mov	r22, r29
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 1a 01 	call	0x234	; 0x234 <PWM_setDutyCycle>
 31a:	6c 2f       	mov	r22, r28
 31c:	85 e0       	ldi	r24, 0x05	; 5
 31e:	0e 94 1a 01 	call	0x234	; 0x234 <PWM_setDutyCycle>
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <RGB_setRed>:
		break;
	}
}

void RGB_setRed() {
	RGB_setColor(120, 0, 0);
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	88 e7       	ldi	r24, 0x78	; 120
 32e:	0e 94 81 01 	call	0x302	; 0x302 <RGB_setColor>
 332:	08 95       	ret

00000334 <RGB_setGreen>:
}

void RGB_setGreen() {
	RGB_setColor(0, 120, 0);
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	68 e7       	ldi	r22, 0x78	; 120
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 81 01 	call	0x302	; 0x302 <RGB_setColor>
 33e:	08 95       	ret

00000340 <RGB_setBlue>:
}

void RGB_setBlue() {
	RGB_setColor(0, 0, 120);
 340:	48 e7       	ldi	r20, 0x78	; 120
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 81 01 	call	0x302	; 0x302 <RGB_setColor>
 34a:	08 95       	ret

0000034c <SerialPort_Init>:

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
}
 34c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 350:	96 e0       	ldi	r25, 0x06	; 6
 352:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 356:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 35a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 35e:	08 95       	ret

00000360 <SerialPort_TX_Enable>:
 360:	e1 ec       	ldi	r30, 0xC1	; 193
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	88 60       	ori	r24, 0x08	; 8
 368:	80 83       	st	Z, r24
 36a:	08 95       	ret

0000036c <SerialPort_TX_Interrupt_Enable>:
 36c:	e1 ec       	ldi	r30, 0xC1	; 193
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	80 62       	ori	r24, 0x20	; 32
 374:	80 83       	st	Z, r24
 376:	08 95       	ret

00000378 <SerialPort_TX_Interrupt_Disable>:
 378:	e1 ec       	ldi	r30, 0xC1	; 193
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	8f 7d       	andi	r24, 0xDF	; 223
 380:	80 83       	st	Z, r24
 382:	08 95       	ret

00000384 <SerialPort_RX_Enable>:
 384:	e1 ec       	ldi	r30, 0xC1	; 193
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	80 61       	ori	r24, 0x10	; 16
 38c:	80 83       	st	Z, r24
 38e:	08 95       	ret

00000390 <SerialPort_RX_Interrupt_Enable>:
 390:	e1 ec       	ldi	r30, 0xC1	; 193
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	80 68       	ori	r24, 0x80	; 128
 398:	80 83       	st	Z, r24
 39a:	08 95       	ret

0000039c <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 39c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3a0:	08 95       	ret

000003a2 <UART_init>:
volatile unsigned char nuevoDato = 0;

static int nuevoComando = 0;

void UART_init(){
	SerialPort_Init(0x67); // inicializar puerto serie
 3a2:	87 e6       	ldi	r24, 0x67	; 103
 3a4:	0e 94 a6 01 	call	0x34c	; 0x34c <SerialPort_Init>
	SerialPort_TX_Enable(); // habilitar transmisor TX
 3a8:	0e 94 b0 01 	call	0x360	; 0x360 <SerialPort_TX_Enable>
	SerialPort_RX_Enable(); // habilitar receptor RX
 3ac:	0e 94 c2 01 	call	0x384	; 0x384 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable(); // habilitar interrupciones de recepción
 3b0:	0e 94 c8 01 	call	0x390	; 0x390 <SerialPort_RX_Interrupt_Enable>
 3b4:	08 95       	ret

000003b6 <UART_sendString>:
}

void UART_sendString(char* s){
 3b6:	ac 01       	movw	r20, r24
	unsigned char indice = 0;
 3b8:	20 e0       	ldi	r18, 0x00	; 0
	while(s[indice] != '\0'){ // Mientras no llegue al fin de la cadena
 3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <UART_sendString+0x20>
		if(TX_indiceescritura < 105){ // si el índice es menor al tamaño máximo del buffer
 3bc:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <TX_indiceescritura>
 3c0:	99 36       	cpi	r25, 0x69	; 105
 3c2:	40 f4       	brcc	.+16     	; 0x3d4 <UART_sendString+0x1e>
			TX_Buffer[TX_indiceescritura] = s[indice]; // Guardar carácter en buffer
 3c4:	e9 2f       	mov	r30, r25
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	ef 58       	subi	r30, 0x8F	; 143
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	30 83       	st	Z, r19
			TX_indiceescritura++;
 3ce:	9f 5f       	subi	r25, 0xFF	; 255
 3d0:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <TX_indiceescritura>
		}
		indice++;
 3d4:	2f 5f       	subi	r18, 0xFF	; 255
	SerialPort_RX_Interrupt_Enable(); // habilitar interrupciones de recepción
}

void UART_sendString(char* s){
	unsigned char indice = 0;
	while(s[indice] != '\0'){ // Mientras no llegue al fin de la cadena
 3d6:	fa 01       	movw	r30, r20
 3d8:	e2 0f       	add	r30, r18
 3da:	f1 1d       	adc	r31, r1
 3dc:	30 81       	ld	r19, Z
 3de:	31 11       	cpse	r19, r1
 3e0:	ed cf       	rjmp	.-38     	; 0x3bc <UART_sendString+0x6>
			TX_Buffer[TX_indiceescritura] = s[indice]; // Guardar carácter en buffer
			TX_indiceescritura++;
		}
		indice++;
	}
	hayString = 1; // Activo flag
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <hayString>
	SerialPort_TX_Interrupt_Enable(); // Activo interrupción de transmisión
 3e8:	0e 94 b6 01 	call	0x36c	; 0x36c <SerialPort_TX_Interrupt_Enable>
 3ec:	08 95       	ret

000003ee <UART_hayComando>:
}

char UART_hayComando(){
	return nuevoDato; // Retorna si hay un nuevo dato recibido
 3ee:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <nuevoDato>
}
 3f2:	08 95       	ret

000003f4 <UART_setHayComando>:

void UART_setHayComando(){
	nuevoDato = 0; // Resetear bandera de nuevo dato
 3f4:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <nuevoDato>
 3f8:	08 95       	ret

000003fa <UART_getComando>:
}

char UART_getComando(){
	return RX_Buffer; // Retorna el carácter recibido
 3fa:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <RX_Buffer>
}
 3fe:	08 95       	ret

00000400 <__vector_18>:

ISR(USART_RX_vect){
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	8f 93       	push	r24
	RX_Buffer = UDR0; // Leer el dato recibido
 40c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 410:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <RX_Buffer>
	nuevoDato = 1; // Indicar que hay un nuevo dato
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <nuevoDato>
}
 41a:	8f 91       	pop	r24
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <__vector_19>:

ISR(USART_UDRE_vect){
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
	if(hayString){ // Si hay cadena para transmitir
 448:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <hayString>
 44c:	88 23       	and	r24, r24
 44e:	d1 f0       	breq	.+52     	; 0x484 <__vector_19+0x5e>
		if (TX_indicelectura < TX_indiceescritura){ // Si sigue habiendo datos
 450:	e0 91 db 01 	lds	r30, 0x01DB	; 0x8001db <TX_indicelectura>
 454:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <TX_indiceescritura>
 458:	e8 17       	cp	r30, r24
 45a:	60 f4       	brcc	.+24     	; 0x474 <__vector_19+0x4e>
			SerialPort_Send_Data(TX_Buffer[TX_indicelectura]); // Enviar dato
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	ef 58       	subi	r30, 0x8F	; 143
 460:	fe 4f       	sbci	r31, 0xFE	; 254
 462:	80 81       	ld	r24, Z
 464:	0e 94 ce 01 	call	0x39c	; 0x39c <SerialPort_Send_Data>
			TX_indicelectura++;
 468:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <TX_indicelectura>
 46c:	8f 5f       	subi	r24, 0xFF	; 255
 46e:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <TX_indicelectura>
 472:	08 c0       	rjmp	.+16     	; 0x484 <__vector_19+0x5e>
		}
		else {
			hayString = 0; // Termino de transmitir
 474:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <hayString>
			TX_indicelectura = 0;
 478:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <TX_indicelectura>
			TX_indiceescritura = 0;
 47c:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <TX_indiceescritura>
			SerialPort_TX_Interrupt_Disable(); // Deshabilitar interrupción de transmisión
 480:	0e 94 bc 01 	call	0x378	; 0x378 <SerialPort_TX_Interrupt_Disable>
		}
	}
}
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <sprintf>:
 4a6:	ae e0       	ldi	r26, 0x0E	; 14
 4a8:	b0 e0       	ldi	r27, 0x00	; 0
 4aa:	e9 e5       	ldi	r30, 0x59	; 89
 4ac:	f2 e0       	ldi	r31, 0x02	; 2
 4ae:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__prologue_saves__+0x1c>
 4b2:	0d 89       	ldd	r16, Y+21	; 0x15
 4b4:	1e 89       	ldd	r17, Y+22	; 0x16
 4b6:	86 e0       	ldi	r24, 0x06	; 6
 4b8:	8c 83       	std	Y+4, r24	; 0x04
 4ba:	1a 83       	std	Y+2, r17	; 0x02
 4bc:	09 83       	std	Y+1, r16	; 0x01
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	9f e7       	ldi	r25, 0x7F	; 127
 4c2:	9e 83       	std	Y+6, r25	; 0x06
 4c4:	8d 83       	std	Y+5, r24	; 0x05
 4c6:	ae 01       	movw	r20, r28
 4c8:	47 5e       	subi	r20, 0xE7	; 231
 4ca:	5f 4f       	sbci	r21, 0xFF	; 255
 4cc:	6f 89       	ldd	r22, Y+23	; 0x17
 4ce:	78 8d       	ldd	r23, Y+24	; 0x18
 4d0:	ce 01       	movw	r24, r28
 4d2:	01 96       	adiw	r24, 0x01	; 1
 4d4:	0e 94 75 02 	call	0x4ea	; 0x4ea <vfprintf>
 4d8:	ef 81       	ldd	r30, Y+7	; 0x07
 4da:	f8 85       	ldd	r31, Y+8	; 0x08
 4dc:	e0 0f       	add	r30, r16
 4de:	f1 1f       	adc	r31, r17
 4e0:	10 82       	st	Z, r1
 4e2:	2e 96       	adiw	r28, 0x0e	; 14
 4e4:	e4 e0       	ldi	r30, 0x04	; 4
 4e6:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__epilogue_restores__+0x1c>

000004ea <vfprintf>:
 4ea:	ab e0       	ldi	r26, 0x0B	; 11
 4ec:	b0 e0       	ldi	r27, 0x00	; 0
 4ee:	eb e7       	ldi	r30, 0x7B	; 123
 4f0:	f2 e0       	ldi	r31, 0x02	; 2
 4f2:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__prologue_saves__>
 4f6:	6c 01       	movw	r12, r24
 4f8:	7b 01       	movw	r14, r22
 4fa:	8a 01       	movw	r16, r20
 4fc:	fc 01       	movw	r30, r24
 4fe:	17 82       	std	Z+7, r1	; 0x07
 500:	16 82       	std	Z+6, r1	; 0x06
 502:	83 81       	ldd	r24, Z+3	; 0x03
 504:	81 ff       	sbrs	r24, 1
 506:	cc c1       	rjmp	.+920    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	3c 01       	movw	r6, r24
 50e:	f6 01       	movw	r30, r12
 510:	93 81       	ldd	r25, Z+3	; 0x03
 512:	f7 01       	movw	r30, r14
 514:	93 fd       	sbrc	r25, 3
 516:	85 91       	lpm	r24, Z+
 518:	93 ff       	sbrs	r25, 3
 51a:	81 91       	ld	r24, Z+
 51c:	7f 01       	movw	r14, r30
 51e:	88 23       	and	r24, r24
 520:	09 f4       	brne	.+2      	; 0x524 <vfprintf+0x3a>
 522:	ba c1       	rjmp	.+884    	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 524:	85 32       	cpi	r24, 0x25	; 37
 526:	39 f4       	brne	.+14     	; 0x536 <vfprintf+0x4c>
 528:	93 fd       	sbrc	r25, 3
 52a:	85 91       	lpm	r24, Z+
 52c:	93 ff       	sbrs	r25, 3
 52e:	81 91       	ld	r24, Z+
 530:	7f 01       	movw	r14, r30
 532:	85 32       	cpi	r24, 0x25	; 37
 534:	29 f4       	brne	.+10     	; 0x540 <vfprintf+0x56>
 536:	b6 01       	movw	r22, r12
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
 53e:	e7 cf       	rjmp	.-50     	; 0x50e <vfprintf+0x24>
 540:	91 2c       	mov	r9, r1
 542:	21 2c       	mov	r2, r1
 544:	31 2c       	mov	r3, r1
 546:	ff e1       	ldi	r31, 0x1F	; 31
 548:	f3 15       	cp	r31, r3
 54a:	d8 f0       	brcs	.+54     	; 0x582 <vfprintf+0x98>
 54c:	8b 32       	cpi	r24, 0x2B	; 43
 54e:	79 f0       	breq	.+30     	; 0x56e <vfprintf+0x84>
 550:	38 f4       	brcc	.+14     	; 0x560 <vfprintf+0x76>
 552:	80 32       	cpi	r24, 0x20	; 32
 554:	79 f0       	breq	.+30     	; 0x574 <vfprintf+0x8a>
 556:	83 32       	cpi	r24, 0x23	; 35
 558:	a1 f4       	brne	.+40     	; 0x582 <vfprintf+0x98>
 55a:	23 2d       	mov	r18, r3
 55c:	20 61       	ori	r18, 0x10	; 16
 55e:	1d c0       	rjmp	.+58     	; 0x59a <vfprintf+0xb0>
 560:	8d 32       	cpi	r24, 0x2D	; 45
 562:	61 f0       	breq	.+24     	; 0x57c <vfprintf+0x92>
 564:	80 33       	cpi	r24, 0x30	; 48
 566:	69 f4       	brne	.+26     	; 0x582 <vfprintf+0x98>
 568:	23 2d       	mov	r18, r3
 56a:	21 60       	ori	r18, 0x01	; 1
 56c:	16 c0       	rjmp	.+44     	; 0x59a <vfprintf+0xb0>
 56e:	83 2d       	mov	r24, r3
 570:	82 60       	ori	r24, 0x02	; 2
 572:	38 2e       	mov	r3, r24
 574:	e3 2d       	mov	r30, r3
 576:	e4 60       	ori	r30, 0x04	; 4
 578:	3e 2e       	mov	r3, r30
 57a:	2a c0       	rjmp	.+84     	; 0x5d0 <vfprintf+0xe6>
 57c:	f3 2d       	mov	r31, r3
 57e:	f8 60       	ori	r31, 0x08	; 8
 580:	1d c0       	rjmp	.+58     	; 0x5bc <vfprintf+0xd2>
 582:	37 fc       	sbrc	r3, 7
 584:	2d c0       	rjmp	.+90     	; 0x5e0 <vfprintf+0xf6>
 586:	20 ed       	ldi	r18, 0xD0	; 208
 588:	28 0f       	add	r18, r24
 58a:	2a 30       	cpi	r18, 0x0A	; 10
 58c:	40 f0       	brcs	.+16     	; 0x59e <vfprintf+0xb4>
 58e:	8e 32       	cpi	r24, 0x2E	; 46
 590:	b9 f4       	brne	.+46     	; 0x5c0 <vfprintf+0xd6>
 592:	36 fc       	sbrc	r3, 6
 594:	81 c1       	rjmp	.+770    	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 596:	23 2d       	mov	r18, r3
 598:	20 64       	ori	r18, 0x40	; 64
 59a:	32 2e       	mov	r3, r18
 59c:	19 c0       	rjmp	.+50     	; 0x5d0 <vfprintf+0xe6>
 59e:	36 fe       	sbrs	r3, 6
 5a0:	06 c0       	rjmp	.+12     	; 0x5ae <vfprintf+0xc4>
 5a2:	8a e0       	ldi	r24, 0x0A	; 10
 5a4:	98 9e       	mul	r9, r24
 5a6:	20 0d       	add	r18, r0
 5a8:	11 24       	eor	r1, r1
 5aa:	92 2e       	mov	r9, r18
 5ac:	11 c0       	rjmp	.+34     	; 0x5d0 <vfprintf+0xe6>
 5ae:	ea e0       	ldi	r30, 0x0A	; 10
 5b0:	2e 9e       	mul	r2, r30
 5b2:	20 0d       	add	r18, r0
 5b4:	11 24       	eor	r1, r1
 5b6:	22 2e       	mov	r2, r18
 5b8:	f3 2d       	mov	r31, r3
 5ba:	f0 62       	ori	r31, 0x20	; 32
 5bc:	3f 2e       	mov	r3, r31
 5be:	08 c0       	rjmp	.+16     	; 0x5d0 <vfprintf+0xe6>
 5c0:	8c 36       	cpi	r24, 0x6C	; 108
 5c2:	21 f4       	brne	.+8      	; 0x5cc <vfprintf+0xe2>
 5c4:	83 2d       	mov	r24, r3
 5c6:	80 68       	ori	r24, 0x80	; 128
 5c8:	38 2e       	mov	r3, r24
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <vfprintf+0xe6>
 5cc:	88 36       	cpi	r24, 0x68	; 104
 5ce:	41 f4       	brne	.+16     	; 0x5e0 <vfprintf+0xf6>
 5d0:	f7 01       	movw	r30, r14
 5d2:	93 fd       	sbrc	r25, 3
 5d4:	85 91       	lpm	r24, Z+
 5d6:	93 ff       	sbrs	r25, 3
 5d8:	81 91       	ld	r24, Z+
 5da:	7f 01       	movw	r14, r30
 5dc:	81 11       	cpse	r24, r1
 5de:	b3 cf       	rjmp	.-154    	; 0x546 <vfprintf+0x5c>
 5e0:	98 2f       	mov	r25, r24
 5e2:	9f 7d       	andi	r25, 0xDF	; 223
 5e4:	95 54       	subi	r25, 0x45	; 69
 5e6:	93 30       	cpi	r25, 0x03	; 3
 5e8:	28 f4       	brcc	.+10     	; 0x5f4 <vfprintf+0x10a>
 5ea:	0c 5f       	subi	r16, 0xFC	; 252
 5ec:	1f 4f       	sbci	r17, 0xFF	; 255
 5ee:	9f e3       	ldi	r25, 0x3F	; 63
 5f0:	99 83       	std	Y+1, r25	; 0x01
 5f2:	0d c0       	rjmp	.+26     	; 0x60e <vfprintf+0x124>
 5f4:	83 36       	cpi	r24, 0x63	; 99
 5f6:	31 f0       	breq	.+12     	; 0x604 <vfprintf+0x11a>
 5f8:	83 37       	cpi	r24, 0x73	; 115
 5fa:	71 f0       	breq	.+28     	; 0x618 <vfprintf+0x12e>
 5fc:	83 35       	cpi	r24, 0x53	; 83
 5fe:	09 f0       	breq	.+2      	; 0x602 <vfprintf+0x118>
 600:	59 c0       	rjmp	.+178    	; 0x6b4 <vfprintf+0x1ca>
 602:	21 c0       	rjmp	.+66     	; 0x646 <vfprintf+0x15c>
 604:	f8 01       	movw	r30, r16
 606:	80 81       	ld	r24, Z
 608:	89 83       	std	Y+1, r24	; 0x01
 60a:	0e 5f       	subi	r16, 0xFE	; 254
 60c:	1f 4f       	sbci	r17, 0xFF	; 255
 60e:	88 24       	eor	r8, r8
 610:	83 94       	inc	r8
 612:	91 2c       	mov	r9, r1
 614:	53 01       	movw	r10, r6
 616:	13 c0       	rjmp	.+38     	; 0x63e <vfprintf+0x154>
 618:	28 01       	movw	r4, r16
 61a:	f2 e0       	ldi	r31, 0x02	; 2
 61c:	4f 0e       	add	r4, r31
 61e:	51 1c       	adc	r5, r1
 620:	f8 01       	movw	r30, r16
 622:	a0 80       	ld	r10, Z
 624:	b1 80       	ldd	r11, Z+1	; 0x01
 626:	36 fe       	sbrs	r3, 6
 628:	03 c0       	rjmp	.+6      	; 0x630 <vfprintf+0x146>
 62a:	69 2d       	mov	r22, r9
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <vfprintf+0x14a>
 630:	6f ef       	ldi	r22, 0xFF	; 255
 632:	7f ef       	ldi	r23, 0xFF	; 255
 634:	c5 01       	movw	r24, r10
 636:	0e 94 61 04 	call	0x8c2	; 0x8c2 <strnlen>
 63a:	4c 01       	movw	r8, r24
 63c:	82 01       	movw	r16, r4
 63e:	f3 2d       	mov	r31, r3
 640:	ff 77       	andi	r31, 0x7F	; 127
 642:	3f 2e       	mov	r3, r31
 644:	16 c0       	rjmp	.+44     	; 0x672 <vfprintf+0x188>
 646:	28 01       	movw	r4, r16
 648:	22 e0       	ldi	r18, 0x02	; 2
 64a:	42 0e       	add	r4, r18
 64c:	51 1c       	adc	r5, r1
 64e:	f8 01       	movw	r30, r16
 650:	a0 80       	ld	r10, Z
 652:	b1 80       	ldd	r11, Z+1	; 0x01
 654:	36 fe       	sbrs	r3, 6
 656:	03 c0       	rjmp	.+6      	; 0x65e <vfprintf+0x174>
 658:	69 2d       	mov	r22, r9
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	02 c0       	rjmp	.+4      	; 0x662 <vfprintf+0x178>
 65e:	6f ef       	ldi	r22, 0xFF	; 255
 660:	7f ef       	ldi	r23, 0xFF	; 255
 662:	c5 01       	movw	r24, r10
 664:	0e 94 56 04 	call	0x8ac	; 0x8ac <strnlen_P>
 668:	4c 01       	movw	r8, r24
 66a:	f3 2d       	mov	r31, r3
 66c:	f0 68       	ori	r31, 0x80	; 128
 66e:	3f 2e       	mov	r3, r31
 670:	82 01       	movw	r16, r4
 672:	33 fc       	sbrc	r3, 3
 674:	1b c0       	rjmp	.+54     	; 0x6ac <vfprintf+0x1c2>
 676:	82 2d       	mov	r24, r2
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	88 16       	cp	r8, r24
 67c:	99 06       	cpc	r9, r25
 67e:	b0 f4       	brcc	.+44     	; 0x6ac <vfprintf+0x1c2>
 680:	b6 01       	movw	r22, r12
 682:	80 e2       	ldi	r24, 0x20	; 32
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
 68a:	2a 94       	dec	r2
 68c:	f4 cf       	rjmp	.-24     	; 0x676 <vfprintf+0x18c>
 68e:	f5 01       	movw	r30, r10
 690:	37 fc       	sbrc	r3, 7
 692:	85 91       	lpm	r24, Z+
 694:	37 fe       	sbrs	r3, 7
 696:	81 91       	ld	r24, Z+
 698:	5f 01       	movw	r10, r30
 69a:	b6 01       	movw	r22, r12
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
 6a2:	21 10       	cpse	r2, r1
 6a4:	2a 94       	dec	r2
 6a6:	21 e0       	ldi	r18, 0x01	; 1
 6a8:	82 1a       	sub	r8, r18
 6aa:	91 08       	sbc	r9, r1
 6ac:	81 14       	cp	r8, r1
 6ae:	91 04       	cpc	r9, r1
 6b0:	71 f7       	brne	.-36     	; 0x68e <vfprintf+0x1a4>
 6b2:	e8 c0       	rjmp	.+464    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 6b4:	84 36       	cpi	r24, 0x64	; 100
 6b6:	11 f0       	breq	.+4      	; 0x6bc <vfprintf+0x1d2>
 6b8:	89 36       	cpi	r24, 0x69	; 105
 6ba:	41 f5       	brne	.+80     	; 0x70c <vfprintf+0x222>
 6bc:	f8 01       	movw	r30, r16
 6be:	37 fe       	sbrs	r3, 7
 6c0:	07 c0       	rjmp	.+14     	; 0x6d0 <vfprintf+0x1e6>
 6c2:	60 81       	ld	r22, Z
 6c4:	71 81       	ldd	r23, Z+1	; 0x01
 6c6:	82 81       	ldd	r24, Z+2	; 0x02
 6c8:	93 81       	ldd	r25, Z+3	; 0x03
 6ca:	0c 5f       	subi	r16, 0xFC	; 252
 6cc:	1f 4f       	sbci	r17, 0xFF	; 255
 6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <vfprintf+0x1f6>
 6d0:	60 81       	ld	r22, Z
 6d2:	71 81       	ldd	r23, Z+1	; 0x01
 6d4:	07 2e       	mov	r0, r23
 6d6:	00 0c       	add	r0, r0
 6d8:	88 0b       	sbc	r24, r24
 6da:	99 0b       	sbc	r25, r25
 6dc:	0e 5f       	subi	r16, 0xFE	; 254
 6de:	1f 4f       	sbci	r17, 0xFF	; 255
 6e0:	f3 2d       	mov	r31, r3
 6e2:	ff 76       	andi	r31, 0x6F	; 111
 6e4:	3f 2e       	mov	r3, r31
 6e6:	97 ff       	sbrs	r25, 7
 6e8:	09 c0       	rjmp	.+18     	; 0x6fc <vfprintf+0x212>
 6ea:	90 95       	com	r25
 6ec:	80 95       	com	r24
 6ee:	70 95       	com	r23
 6f0:	61 95       	neg	r22
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255
 6f4:	8f 4f       	sbci	r24, 0xFF	; 255
 6f6:	9f 4f       	sbci	r25, 0xFF	; 255
 6f8:	f0 68       	ori	r31, 0x80	; 128
 6fa:	3f 2e       	mov	r3, r31
 6fc:	2a e0       	ldi	r18, 0x0A	; 10
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	a3 01       	movw	r20, r6
 702:	0e 94 a8 04 	call	0x950	; 0x950 <__ultoa_invert>
 706:	88 2e       	mov	r8, r24
 708:	86 18       	sub	r8, r6
 70a:	45 c0       	rjmp	.+138    	; 0x796 <vfprintf+0x2ac>
 70c:	85 37       	cpi	r24, 0x75	; 117
 70e:	31 f4       	brne	.+12     	; 0x71c <vfprintf+0x232>
 710:	23 2d       	mov	r18, r3
 712:	2f 7e       	andi	r18, 0xEF	; 239
 714:	b2 2e       	mov	r11, r18
 716:	2a e0       	ldi	r18, 0x0A	; 10
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	25 c0       	rjmp	.+74     	; 0x766 <vfprintf+0x27c>
 71c:	93 2d       	mov	r25, r3
 71e:	99 7f       	andi	r25, 0xF9	; 249
 720:	b9 2e       	mov	r11, r25
 722:	8f 36       	cpi	r24, 0x6F	; 111
 724:	c1 f0       	breq	.+48     	; 0x756 <vfprintf+0x26c>
 726:	18 f4       	brcc	.+6      	; 0x72e <vfprintf+0x244>
 728:	88 35       	cpi	r24, 0x58	; 88
 72a:	79 f0       	breq	.+30     	; 0x74a <vfprintf+0x260>
 72c:	b5 c0       	rjmp	.+362    	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 72e:	80 37       	cpi	r24, 0x70	; 112
 730:	19 f0       	breq	.+6      	; 0x738 <vfprintf+0x24e>
 732:	88 37       	cpi	r24, 0x78	; 120
 734:	21 f0       	breq	.+8      	; 0x73e <vfprintf+0x254>
 736:	b0 c0       	rjmp	.+352    	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 738:	e9 2f       	mov	r30, r25
 73a:	e0 61       	ori	r30, 0x10	; 16
 73c:	be 2e       	mov	r11, r30
 73e:	b4 fe       	sbrs	r11, 4
 740:	0d c0       	rjmp	.+26     	; 0x75c <vfprintf+0x272>
 742:	fb 2d       	mov	r31, r11
 744:	f4 60       	ori	r31, 0x04	; 4
 746:	bf 2e       	mov	r11, r31
 748:	09 c0       	rjmp	.+18     	; 0x75c <vfprintf+0x272>
 74a:	34 fe       	sbrs	r3, 4
 74c:	0a c0       	rjmp	.+20     	; 0x762 <vfprintf+0x278>
 74e:	29 2f       	mov	r18, r25
 750:	26 60       	ori	r18, 0x06	; 6
 752:	b2 2e       	mov	r11, r18
 754:	06 c0       	rjmp	.+12     	; 0x762 <vfprintf+0x278>
 756:	28 e0       	ldi	r18, 0x08	; 8
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	05 c0       	rjmp	.+10     	; 0x766 <vfprintf+0x27c>
 75c:	20 e1       	ldi	r18, 0x10	; 16
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	02 c0       	rjmp	.+4      	; 0x766 <vfprintf+0x27c>
 762:	20 e1       	ldi	r18, 0x10	; 16
 764:	32 e0       	ldi	r19, 0x02	; 2
 766:	f8 01       	movw	r30, r16
 768:	b7 fe       	sbrs	r11, 7
 76a:	07 c0       	rjmp	.+14     	; 0x77a <vfprintf+0x290>
 76c:	60 81       	ld	r22, Z
 76e:	71 81       	ldd	r23, Z+1	; 0x01
 770:	82 81       	ldd	r24, Z+2	; 0x02
 772:	93 81       	ldd	r25, Z+3	; 0x03
 774:	0c 5f       	subi	r16, 0xFC	; 252
 776:	1f 4f       	sbci	r17, 0xFF	; 255
 778:	06 c0       	rjmp	.+12     	; 0x786 <vfprintf+0x29c>
 77a:	60 81       	ld	r22, Z
 77c:	71 81       	ldd	r23, Z+1	; 0x01
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 5f       	subi	r16, 0xFE	; 254
 784:	1f 4f       	sbci	r17, 0xFF	; 255
 786:	a3 01       	movw	r20, r6
 788:	0e 94 a8 04 	call	0x950	; 0x950 <__ultoa_invert>
 78c:	88 2e       	mov	r8, r24
 78e:	86 18       	sub	r8, r6
 790:	fb 2d       	mov	r31, r11
 792:	ff 77       	andi	r31, 0x7F	; 127
 794:	3f 2e       	mov	r3, r31
 796:	36 fe       	sbrs	r3, 6
 798:	0d c0       	rjmp	.+26     	; 0x7b4 <vfprintf+0x2ca>
 79a:	23 2d       	mov	r18, r3
 79c:	2e 7f       	andi	r18, 0xFE	; 254
 79e:	a2 2e       	mov	r10, r18
 7a0:	89 14       	cp	r8, r9
 7a2:	58 f4       	brcc	.+22     	; 0x7ba <vfprintf+0x2d0>
 7a4:	34 fe       	sbrs	r3, 4
 7a6:	0b c0       	rjmp	.+22     	; 0x7be <vfprintf+0x2d4>
 7a8:	32 fc       	sbrc	r3, 2
 7aa:	09 c0       	rjmp	.+18     	; 0x7be <vfprintf+0x2d4>
 7ac:	83 2d       	mov	r24, r3
 7ae:	8e 7e       	andi	r24, 0xEE	; 238
 7b0:	a8 2e       	mov	r10, r24
 7b2:	05 c0       	rjmp	.+10     	; 0x7be <vfprintf+0x2d4>
 7b4:	b8 2c       	mov	r11, r8
 7b6:	a3 2c       	mov	r10, r3
 7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <vfprintf+0x2d6>
 7ba:	b8 2c       	mov	r11, r8
 7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <vfprintf+0x2d6>
 7be:	b9 2c       	mov	r11, r9
 7c0:	a4 fe       	sbrs	r10, 4
 7c2:	0f c0       	rjmp	.+30     	; 0x7e2 <vfprintf+0x2f8>
 7c4:	fe 01       	movw	r30, r28
 7c6:	e8 0d       	add	r30, r8
 7c8:	f1 1d       	adc	r31, r1
 7ca:	80 81       	ld	r24, Z
 7cc:	80 33       	cpi	r24, 0x30	; 48
 7ce:	21 f4       	brne	.+8      	; 0x7d8 <vfprintf+0x2ee>
 7d0:	9a 2d       	mov	r25, r10
 7d2:	99 7e       	andi	r25, 0xE9	; 233
 7d4:	a9 2e       	mov	r10, r25
 7d6:	09 c0       	rjmp	.+18     	; 0x7ea <vfprintf+0x300>
 7d8:	a2 fe       	sbrs	r10, 2
 7da:	06 c0       	rjmp	.+12     	; 0x7e8 <vfprintf+0x2fe>
 7dc:	b3 94       	inc	r11
 7de:	b3 94       	inc	r11
 7e0:	04 c0       	rjmp	.+8      	; 0x7ea <vfprintf+0x300>
 7e2:	8a 2d       	mov	r24, r10
 7e4:	86 78       	andi	r24, 0x86	; 134
 7e6:	09 f0       	breq	.+2      	; 0x7ea <vfprintf+0x300>
 7e8:	b3 94       	inc	r11
 7ea:	a3 fc       	sbrc	r10, 3
 7ec:	11 c0       	rjmp	.+34     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7ee:	a0 fe       	sbrs	r10, 0
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <vfprintf+0x314>
 7f2:	b2 14       	cp	r11, r2
 7f4:	88 f4       	brcc	.+34     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7f6:	28 0c       	add	r2, r8
 7f8:	92 2c       	mov	r9, r2
 7fa:	9b 18       	sub	r9, r11
 7fc:	0e c0       	rjmp	.+28     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7fe:	b2 14       	cp	r11, r2
 800:	60 f4       	brcc	.+24     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 802:	b6 01       	movw	r22, r12
 804:	80 e2       	ldi	r24, 0x20	; 32
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
 80c:	b3 94       	inc	r11
 80e:	f7 cf       	rjmp	.-18     	; 0x7fe <vfprintf+0x314>
 810:	b2 14       	cp	r11, r2
 812:	18 f4       	brcc	.+6      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 814:	2b 18       	sub	r2, r11
 816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 818:	98 2c       	mov	r9, r8
 81a:	21 2c       	mov	r2, r1
 81c:	a4 fe       	sbrs	r10, 4
 81e:	10 c0       	rjmp	.+32     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 820:	b6 01       	movw	r22, r12
 822:	80 e3       	ldi	r24, 0x30	; 48
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
 82a:	a2 fe       	sbrs	r10, 2
 82c:	17 c0       	rjmp	.+46     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 82e:	a1 fc       	sbrc	r10, 1
 830:	03 c0       	rjmp	.+6      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 832:	88 e7       	ldi	r24, 0x78	; 120
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 838:	88 e5       	ldi	r24, 0x58	; 88
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	b6 01       	movw	r22, r12
 83e:	0c c0       	rjmp	.+24     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 840:	8a 2d       	mov	r24, r10
 842:	86 78       	andi	r24, 0x86	; 134
 844:	59 f0       	breq	.+22     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 846:	a1 fe       	sbrs	r10, 1
 848:	02 c0       	rjmp	.+4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84a:	8b e2       	ldi	r24, 0x2B	; 43
 84c:	01 c0       	rjmp	.+2      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84e:	80 e2       	ldi	r24, 0x20	; 32
 850:	a7 fc       	sbrc	r10, 7
 852:	8d e2       	ldi	r24, 0x2D	; 45
 854:	b6 01       	movw	r22, r12
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
 85c:	89 14       	cp	r8, r9
 85e:	38 f4       	brcc	.+14     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 860:	b6 01       	movw	r22, r12
 862:	80 e3       	ldi	r24, 0x30	; 48
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
 86a:	9a 94       	dec	r9
 86c:	f7 cf       	rjmp	.-18     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 86e:	8a 94       	dec	r8
 870:	f3 01       	movw	r30, r6
 872:	e8 0d       	add	r30, r8
 874:	f1 1d       	adc	r31, r1
 876:	80 81       	ld	r24, Z
 878:	b6 01       	movw	r22, r12
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
 880:	81 10       	cpse	r8, r1
 882:	f5 cf       	rjmp	.-22     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 884:	22 20       	and	r2, r2
 886:	09 f4       	brne	.+2      	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 888:	42 ce       	rjmp	.-892    	; 0x50e <vfprintf+0x24>
 88a:	b6 01       	movw	r22, r12
 88c:	80 e2       	ldi	r24, 0x20	; 32
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <fputc>
 894:	2a 94       	dec	r2
 896:	f6 cf       	rjmp	.-20     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 898:	f6 01       	movw	r30, r12
 89a:	86 81       	ldd	r24, Z+6	; 0x06
 89c:	97 81       	ldd	r25, Z+7	; 0x07
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 8a0:	8f ef       	ldi	r24, 0xFF	; 255
 8a2:	9f ef       	ldi	r25, 0xFF	; 255
 8a4:	2b 96       	adiw	r28, 0x0b	; 11
 8a6:	e2 e1       	ldi	r30, 0x12	; 18
 8a8:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__epilogue_restores__>

000008ac <strnlen_P>:
 8ac:	fc 01       	movw	r30, r24
 8ae:	05 90       	lpm	r0, Z+
 8b0:	61 50       	subi	r22, 0x01	; 1
 8b2:	70 40       	sbci	r23, 0x00	; 0
 8b4:	01 10       	cpse	r0, r1
 8b6:	d8 f7       	brcc	.-10     	; 0x8ae <strnlen_P+0x2>
 8b8:	80 95       	com	r24
 8ba:	90 95       	com	r25
 8bc:	8e 0f       	add	r24, r30
 8be:	9f 1f       	adc	r25, r31
 8c0:	08 95       	ret

000008c2 <strnlen>:
 8c2:	fc 01       	movw	r30, r24
 8c4:	61 50       	subi	r22, 0x01	; 1
 8c6:	70 40       	sbci	r23, 0x00	; 0
 8c8:	01 90       	ld	r0, Z+
 8ca:	01 10       	cpse	r0, r1
 8cc:	d8 f7       	brcc	.-10     	; 0x8c4 <strnlen+0x2>
 8ce:	80 95       	com	r24
 8d0:	90 95       	com	r25
 8d2:	8e 0f       	add	r24, r30
 8d4:	9f 1f       	adc	r25, r31
 8d6:	08 95       	ret

000008d8 <fputc>:
 8d8:	0f 93       	push	r16
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	fb 01       	movw	r30, r22
 8e2:	23 81       	ldd	r18, Z+3	; 0x03
 8e4:	21 fd       	sbrc	r18, 1
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <fputc+0x16>
 8e8:	8f ef       	ldi	r24, 0xFF	; 255
 8ea:	9f ef       	ldi	r25, 0xFF	; 255
 8ec:	2c c0       	rjmp	.+88     	; 0x946 <__stack+0x47>
 8ee:	22 ff       	sbrs	r18, 2
 8f0:	16 c0       	rjmp	.+44     	; 0x91e <__stack+0x1f>
 8f2:	46 81       	ldd	r20, Z+6	; 0x06
 8f4:	57 81       	ldd	r21, Z+7	; 0x07
 8f6:	24 81       	ldd	r18, Z+4	; 0x04
 8f8:	35 81       	ldd	r19, Z+5	; 0x05
 8fa:	42 17       	cp	r20, r18
 8fc:	53 07       	cpc	r21, r19
 8fe:	44 f4       	brge	.+16     	; 0x910 <__stack+0x11>
 900:	a0 81       	ld	r26, Z
 902:	b1 81       	ldd	r27, Z+1	; 0x01
 904:	9d 01       	movw	r18, r26
 906:	2f 5f       	subi	r18, 0xFF	; 255
 908:	3f 4f       	sbci	r19, 0xFF	; 255
 90a:	31 83       	std	Z+1, r19	; 0x01
 90c:	20 83       	st	Z, r18
 90e:	8c 93       	st	X, r24
 910:	26 81       	ldd	r18, Z+6	; 0x06
 912:	37 81       	ldd	r19, Z+7	; 0x07
 914:	2f 5f       	subi	r18, 0xFF	; 255
 916:	3f 4f       	sbci	r19, 0xFF	; 255
 918:	37 83       	std	Z+7, r19	; 0x07
 91a:	26 83       	std	Z+6, r18	; 0x06
 91c:	14 c0       	rjmp	.+40     	; 0x946 <__stack+0x47>
 91e:	8b 01       	movw	r16, r22
 920:	ec 01       	movw	r28, r24
 922:	fb 01       	movw	r30, r22
 924:	00 84       	ldd	r0, Z+8	; 0x08
 926:	f1 85       	ldd	r31, Z+9	; 0x09
 928:	e0 2d       	mov	r30, r0
 92a:	09 95       	icall
 92c:	89 2b       	or	r24, r25
 92e:	e1 f6       	brne	.-72     	; 0x8e8 <fputc+0x10>
 930:	d8 01       	movw	r26, r16
 932:	16 96       	adiw	r26, 0x06	; 6
 934:	8d 91       	ld	r24, X+
 936:	9c 91       	ld	r25, X
 938:	17 97       	sbiw	r26, 0x07	; 7
 93a:	01 96       	adiw	r24, 0x01	; 1
 93c:	17 96       	adiw	r26, 0x07	; 7
 93e:	9c 93       	st	X, r25
 940:	8e 93       	st	-X, r24
 942:	16 97       	sbiw	r26, 0x06	; 6
 944:	ce 01       	movw	r24, r28
 946:	df 91       	pop	r29
 948:	cf 91       	pop	r28
 94a:	1f 91       	pop	r17
 94c:	0f 91       	pop	r16
 94e:	08 95       	ret

00000950 <__ultoa_invert>:
 950:	fa 01       	movw	r30, r20
 952:	aa 27       	eor	r26, r26
 954:	28 30       	cpi	r18, 0x08	; 8
 956:	51 f1       	breq	.+84     	; 0x9ac <__ultoa_invert+0x5c>
 958:	20 31       	cpi	r18, 0x10	; 16
 95a:	81 f1       	breq	.+96     	; 0x9bc <__ultoa_invert+0x6c>
 95c:	e8 94       	clt
 95e:	6f 93       	push	r22
 960:	6e 7f       	andi	r22, 0xFE	; 254
 962:	6e 5f       	subi	r22, 0xFE	; 254
 964:	7f 4f       	sbci	r23, 0xFF	; 255
 966:	8f 4f       	sbci	r24, 0xFF	; 255
 968:	9f 4f       	sbci	r25, 0xFF	; 255
 96a:	af 4f       	sbci	r26, 0xFF	; 255
 96c:	b1 e0       	ldi	r27, 0x01	; 1
 96e:	3e d0       	rcall	.+124    	; 0x9ec <__ultoa_invert+0x9c>
 970:	b4 e0       	ldi	r27, 0x04	; 4
 972:	3c d0       	rcall	.+120    	; 0x9ec <__ultoa_invert+0x9c>
 974:	67 0f       	add	r22, r23
 976:	78 1f       	adc	r23, r24
 978:	89 1f       	adc	r24, r25
 97a:	9a 1f       	adc	r25, r26
 97c:	a1 1d       	adc	r26, r1
 97e:	68 0f       	add	r22, r24
 980:	79 1f       	adc	r23, r25
 982:	8a 1f       	adc	r24, r26
 984:	91 1d       	adc	r25, r1
 986:	a1 1d       	adc	r26, r1
 988:	6a 0f       	add	r22, r26
 98a:	71 1d       	adc	r23, r1
 98c:	81 1d       	adc	r24, r1
 98e:	91 1d       	adc	r25, r1
 990:	a1 1d       	adc	r26, r1
 992:	20 d0       	rcall	.+64     	; 0x9d4 <__ultoa_invert+0x84>
 994:	09 f4       	brne	.+2      	; 0x998 <__ultoa_invert+0x48>
 996:	68 94       	set
 998:	3f 91       	pop	r19
 99a:	2a e0       	ldi	r18, 0x0A	; 10
 99c:	26 9f       	mul	r18, r22
 99e:	11 24       	eor	r1, r1
 9a0:	30 19       	sub	r19, r0
 9a2:	30 5d       	subi	r19, 0xD0	; 208
 9a4:	31 93       	st	Z+, r19
 9a6:	de f6       	brtc	.-74     	; 0x95e <__ultoa_invert+0xe>
 9a8:	cf 01       	movw	r24, r30
 9aa:	08 95       	ret
 9ac:	46 2f       	mov	r20, r22
 9ae:	47 70       	andi	r20, 0x07	; 7
 9b0:	40 5d       	subi	r20, 0xD0	; 208
 9b2:	41 93       	st	Z+, r20
 9b4:	b3 e0       	ldi	r27, 0x03	; 3
 9b6:	0f d0       	rcall	.+30     	; 0x9d6 <__ultoa_invert+0x86>
 9b8:	c9 f7       	brne	.-14     	; 0x9ac <__ultoa_invert+0x5c>
 9ba:	f6 cf       	rjmp	.-20     	; 0x9a8 <__ultoa_invert+0x58>
 9bc:	46 2f       	mov	r20, r22
 9be:	4f 70       	andi	r20, 0x0F	; 15
 9c0:	40 5d       	subi	r20, 0xD0	; 208
 9c2:	4a 33       	cpi	r20, 0x3A	; 58
 9c4:	18 f0       	brcs	.+6      	; 0x9cc <__ultoa_invert+0x7c>
 9c6:	49 5d       	subi	r20, 0xD9	; 217
 9c8:	31 fd       	sbrc	r19, 1
 9ca:	40 52       	subi	r20, 0x20	; 32
 9cc:	41 93       	st	Z+, r20
 9ce:	02 d0       	rcall	.+4      	; 0x9d4 <__ultoa_invert+0x84>
 9d0:	a9 f7       	brne	.-22     	; 0x9bc <__ultoa_invert+0x6c>
 9d2:	ea cf       	rjmp	.-44     	; 0x9a8 <__ultoa_invert+0x58>
 9d4:	b4 e0       	ldi	r27, 0x04	; 4
 9d6:	a6 95       	lsr	r26
 9d8:	97 95       	ror	r25
 9da:	87 95       	ror	r24
 9dc:	77 95       	ror	r23
 9de:	67 95       	ror	r22
 9e0:	ba 95       	dec	r27
 9e2:	c9 f7       	brne	.-14     	; 0x9d6 <__ultoa_invert+0x86>
 9e4:	00 97       	sbiw	r24, 0x00	; 0
 9e6:	61 05       	cpc	r22, r1
 9e8:	71 05       	cpc	r23, r1
 9ea:	08 95       	ret
 9ec:	9b 01       	movw	r18, r22
 9ee:	ac 01       	movw	r20, r24
 9f0:	0a 2e       	mov	r0, r26
 9f2:	06 94       	lsr	r0
 9f4:	57 95       	ror	r21
 9f6:	47 95       	ror	r20
 9f8:	37 95       	ror	r19
 9fa:	27 95       	ror	r18
 9fc:	ba 95       	dec	r27
 9fe:	c9 f7       	brne	.-14     	; 0x9f2 <__ultoa_invert+0xa2>
 a00:	62 0f       	add	r22, r18
 a02:	73 1f       	adc	r23, r19
 a04:	84 1f       	adc	r24, r20
 a06:	95 1f       	adc	r25, r21
 a08:	a0 1d       	adc	r26, r0
 a0a:	08 95       	ret

00000a0c <__prologue_saves__>:
 a0c:	2f 92       	push	r2
 a0e:	3f 92       	push	r3
 a10:	4f 92       	push	r4
 a12:	5f 92       	push	r5
 a14:	6f 92       	push	r6
 a16:	7f 92       	push	r7
 a18:	8f 92       	push	r8
 a1a:	9f 92       	push	r9
 a1c:	af 92       	push	r10
 a1e:	bf 92       	push	r11
 a20:	cf 92       	push	r12
 a22:	df 92       	push	r13
 a24:	ef 92       	push	r14
 a26:	ff 92       	push	r15
 a28:	0f 93       	push	r16
 a2a:	1f 93       	push	r17
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	cd b7       	in	r28, 0x3d	; 61
 a32:	de b7       	in	r29, 0x3e	; 62
 a34:	ca 1b       	sub	r28, r26
 a36:	db 0b       	sbc	r29, r27
 a38:	0f b6       	in	r0, 0x3f	; 63
 a3a:	f8 94       	cli
 a3c:	de bf       	out	0x3e, r29	; 62
 a3e:	0f be       	out	0x3f, r0	; 63
 a40:	cd bf       	out	0x3d, r28	; 61
 a42:	09 94       	ijmp

00000a44 <__epilogue_restores__>:
 a44:	2a 88       	ldd	r2, Y+18	; 0x12
 a46:	39 88       	ldd	r3, Y+17	; 0x11
 a48:	48 88       	ldd	r4, Y+16	; 0x10
 a4a:	5f 84       	ldd	r5, Y+15	; 0x0f
 a4c:	6e 84       	ldd	r6, Y+14	; 0x0e
 a4e:	7d 84       	ldd	r7, Y+13	; 0x0d
 a50:	8c 84       	ldd	r8, Y+12	; 0x0c
 a52:	9b 84       	ldd	r9, Y+11	; 0x0b
 a54:	aa 84       	ldd	r10, Y+10	; 0x0a
 a56:	b9 84       	ldd	r11, Y+9	; 0x09
 a58:	c8 84       	ldd	r12, Y+8	; 0x08
 a5a:	df 80       	ldd	r13, Y+7	; 0x07
 a5c:	ee 80       	ldd	r14, Y+6	; 0x06
 a5e:	fd 80       	ldd	r15, Y+5	; 0x05
 a60:	0c 81       	ldd	r16, Y+4	; 0x04
 a62:	1b 81       	ldd	r17, Y+3	; 0x03
 a64:	aa 81       	ldd	r26, Y+2	; 0x02
 a66:	b9 81       	ldd	r27, Y+1	; 0x01
 a68:	ce 0f       	add	r28, r30
 a6a:	d1 1d       	adc	r29, r1
 a6c:	0f b6       	in	r0, 0x3f	; 63
 a6e:	f8 94       	cli
 a70:	de bf       	out	0x3e, r29	; 62
 a72:	0f be       	out	0x3f, r0	; 63
 a74:	cd bf       	out	0x3d, r28	; 61
 a76:	ed 01       	movw	r28, r26
 a78:	08 95       	ret

00000a7a <_exit>:
 a7a:	f8 94       	cli

00000a7c <__stop_program>:
 a7c:	ff cf       	rjmp	.-2      	; 0xa7c <__stop_program>
