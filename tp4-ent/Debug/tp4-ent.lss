
tp4-ent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000002d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007e4  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d3  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000351  00000000  00000000  00001237  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d1  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000113  00000000  00000000  000019f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  88:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PWM_soft_update>:
#define PWM_START DDRB |= (1<<PORTB0)

// PWM SOFTWARE UPDATE
void PWM_soft_update(void){
	static uint8_t PWM_position = 0;
	if(++PWM_position>=PWM_PERIOD){
  90:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <PWM_position.1731>
  94:	8f 5f       	subi	r24, 0xFF	; 255
  96:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PWM_position.1731>
  9a:	84 31       	cpi	r24, 0x14	; 20
  9c:	10 f0       	brcs	.+4      	; 0xa2 <PWM_soft_update+0x12>
		PWM_position = 0;
  9e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <PWM_position.1731>
	}
	if(PWM_position<PWM_DELTA){
  a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <PWM_position.1731>
  a6:	8a 30       	cpi	r24, 0x0A	; 10
  a8:	20 f4       	brcc	.+8      	; 0xb2 <PWM_soft_update+0x22>
		PWM_ON;
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	08 95       	ret
		} else {
		PWM_OFF;
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	08 95       	ret

000000ba <violet>:
void violet(void){
	static uint8_t R_pos = 0;
	static uint8_t G_pos = 0;
	static uint8_t B_pos = 0;
	
	if(++R_pos>=PWM_PERIOD){
  ba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <R_pos.1738>
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <R_pos.1738>
  c4:	84 31       	cpi	r24, 0x14	; 20
  c6:	10 f0       	brcs	.+4      	; 0xcc <violet+0x12>
		R_pos = 0;
  c8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <R_pos.1738>
	}
	if(++G_pos>=PWM_PERIOD){
  cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <G_pos.1739>
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <G_pos.1739>
  d6:	84 31       	cpi	r24, 0x14	; 20
  d8:	10 f0       	brcs	.+4      	; 0xde <violet+0x24>
		G_pos = 0;
  da:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <G_pos.1739>
	}
	if(++B_pos>=PWM_PERIOD){
  de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <B_pos.1740>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <B_pos.1740>
  e8:	84 31       	cpi	r24, 0x14	; 20
  ea:	10 f0       	brcs	.+4      	; 0xf0 <violet+0x36>
		B_pos = 0;
  ec:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <B_pos.1740>
	}
	
	if(R_pos<PWM_R_DELTA){
  f0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <R_pos.1738>
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <R>
  fa:	44 e1       	ldi	r20, 0x14	; 20
  fc:	84 9f       	mul	r24, r20
  fe:	c0 01       	movw	r24, r0
 100:	11 24       	eor	r1, r1
 102:	6f ef       	ldi	r22, 0xFF	; 255
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	0e 94 07 01 	call	0x20e	; 0x20e <__divmodhi4>
 10a:	26 17       	cp	r18, r22
 10c:	37 07       	cpc	r19, r23
 10e:	24 f4       	brge	.+8      	; 0x118 <violet+0x5e>
		PWM_R_ON;
 110:	85 b1       	in	r24, 0x05	; 5
 112:	80 62       	ori	r24, 0x20	; 32
 114:	85 b9       	out	0x05, r24	; 5
 116:	03 c0       	rjmp	.+6      	; 0x11e <violet+0x64>
		} else {
		PWM_R_OFF;
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	8f 7d       	andi	r24, 0xDF	; 223
 11c:	85 b9       	out	0x05, r24	; 5
	}
	if(G_pos<PWM_G_DELTA){
		PWM_G_ON;
		} else {
		PWM_G_OFF;
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	85 b9       	out	0x05, r24	; 5
	}
	if(B_pos<PWM_B_DELTA){
 124:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <B_pos.1740>
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <B>
 12e:	44 e1       	ldi	r20, 0x14	; 20
 130:	84 9f       	mul	r24, r20
 132:	c0 01       	movw	r24, r0
 134:	11 24       	eor	r1, r1
 136:	6f ef       	ldi	r22, 0xFF	; 255
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	0e 94 07 01 	call	0x20e	; 0x20e <__divmodhi4>
 13e:	26 17       	cp	r18, r22
 140:	37 07       	cpc	r19, r23
 142:	24 f4       	brge	.+8      	; 0x14c <violet+0x92>
		PWM_B_ON;
 144:	85 b1       	in	r24, 0x05	; 5
 146:	82 60       	ori	r24, 0x02	; 2
 148:	85 b9       	out	0x05, r24	; 5
 14a:	08 95       	ret
		} else {
		PWM_B_OFF;
 14c:	85 b1       	in	r24, 0x05	; 5
 14e:	8d 7f       	andi	r24, 0xFD	; 253
 150:	85 b9       	out	0x05, r24	; 5
 152:	08 95       	ret

00000154 <__vector_14>:
	}
}


// INTERRUPTION
ISR(TIMER0_COMPA_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
	PWM_soft_update();
 176:	0e 94 48 00 	call	0x90	; 0x90 <PWM_soft_update>
	violet();
 17a:	0e 94 5d 00 	call	0xba	; 0xba <violet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	89 e6       	ldi	r24, 0x69	; 105
 182:	98 e1       	ldi	r25, 0x18	; 24
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <__vector_14+0x30>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <__vector_14+0x3a>
 18e:	00 00       	nop
	
	_delay_ms(500);
	
	static uint8_t sw = 0;
	sw++;
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(sw == 2){
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	11 f4       	brne	.+4      	; 0x1a2 <__vector_14+0x4e>
		sw = 0;
 19e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}

	if(sw == 0){ 
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	81 11       	cpse	r24, r1
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <__vector_14+0x60>
		B = 255;
 1aa:	9f ef       	ldi	r25, 0xFF	; 255
 1ac:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <B>
		R = 0;
 1b0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <R>
	}
	if(sw == 1){ 
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	29 f4       	brne	.+10     	; 0x1c2 <__vector_14+0x6e>
		B = 0;
 1b8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <B>
		R = 255;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <R>
	}
}
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	bf 91       	pop	r27
 1c8:	af 91       	pop	r26
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	7f 91       	pop	r23
 1d0:	6f 91       	pop	r22
 1d2:	5f 91       	pop	r21
 1d4:	4f 91       	pop	r20
 1d6:	3f 91       	pop	r19
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <main>:



int main(void){
	
	PWM_START; // port Y as output
 1e4:	84 b1       	in	r24, 0x04	; 4
 1e6:	81 60       	ori	r24, 0x01	; 1
 1e8:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<PORTB5) | (1<<PORTB2) | (1<<PORTB1); // ports RGB as output
 1ea:	84 b1       	in	r24, 0x04	; 4
 1ec:	86 62       	ori	r24, 0x26	; 38
 1ee:	84 b9       	out	0x04, r24	; 4
	
	TCCR0A |= (1<<COM0A1)| (1<<COM0A0) | (1<<WGM01) | (1<<WGM00); // fast PWM inverse
 1f0:	84 b5       	in	r24, 0x24	; 36
 1f2:	83 6c       	ori	r24, 0xC3	; 195
 1f4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) | (1<<CS00); // scaler 64
 1f6:	85 b5       	in	r24, 0x25	; 37
 1f8:	83 60       	ori	r24, 0x03	; 3
 1fa:	85 bd       	out	0x25, r24	; 37
	OCR0A = 10;
 1fc:	8a e0       	ldi	r24, 0x0A	; 10
 1fe:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1<<OCIE0A);
 200:	ee e6       	ldi	r30, 0x6E	; 110
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	82 60       	ori	r24, 0x02	; 2
 208:	80 83       	st	Z, r24
	sei();
 20a:	78 94       	sei
 20c:	ff cf       	rjmp	.-2      	; 0x20c <main+0x28>

0000020e <__divmodhi4>:
 20e:	97 fb       	bst	r25, 7
 210:	07 2e       	mov	r0, r23
 212:	16 f4       	brtc	.+4      	; 0x218 <__divmodhi4+0xa>
 214:	00 94       	com	r0
 216:	07 d0       	rcall	.+14     	; 0x226 <__divmodhi4_neg1>
 218:	77 fd       	sbrc	r23, 7
 21a:	09 d0       	rcall	.+18     	; 0x22e <__divmodhi4_neg2>
 21c:	0e 94 1b 01 	call	0x236	; 0x236 <__udivmodhi4>
 220:	07 fc       	sbrc	r0, 7
 222:	05 d0       	rcall	.+10     	; 0x22e <__divmodhi4_neg2>
 224:	3e f4       	brtc	.+14     	; 0x234 <__divmodhi4_exit>

00000226 <__divmodhi4_neg1>:
 226:	90 95       	com	r25
 228:	81 95       	neg	r24
 22a:	9f 4f       	sbci	r25, 0xFF	; 255
 22c:	08 95       	ret

0000022e <__divmodhi4_neg2>:
 22e:	70 95       	com	r23
 230:	61 95       	neg	r22
 232:	7f 4f       	sbci	r23, 0xFF	; 255

00000234 <__divmodhi4_exit>:
 234:	08 95       	ret

00000236 <__udivmodhi4>:
 236:	aa 1b       	sub	r26, r26
 238:	bb 1b       	sub	r27, r27
 23a:	51 e1       	ldi	r21, 0x11	; 17
 23c:	07 c0       	rjmp	.+14     	; 0x24c <__udivmodhi4_ep>

0000023e <__udivmodhi4_loop>:
 23e:	aa 1f       	adc	r26, r26
 240:	bb 1f       	adc	r27, r27
 242:	a6 17       	cp	r26, r22
 244:	b7 07       	cpc	r27, r23
 246:	10 f0       	brcs	.+4      	; 0x24c <__udivmodhi4_ep>
 248:	a6 1b       	sub	r26, r22
 24a:	b7 0b       	sbc	r27, r23

0000024c <__udivmodhi4_ep>:
 24c:	88 1f       	adc	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	5a 95       	dec	r21
 252:	a9 f7       	brne	.-22     	; 0x23e <__udivmodhi4_loop>
 254:	80 95       	com	r24
 256:	90 95       	com	r25
 258:	bc 01       	movw	r22, r24
 25a:	cd 01       	movw	r24, r26
 25c:	08 95       	ret

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
