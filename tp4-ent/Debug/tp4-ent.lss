
tp4-ent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000019e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006cc  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000646  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023d  00000000  00000000  00000f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036f  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  0000158b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001656  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 81 00 	call	0x102	; 0x102 <main>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PWM_soft_update>:
#define PWM_START DDRB |= (1<<PORTB5)

// PWM SOFTWARE UPDATE
void PWM_soft_update(void){
	static uint8_t PWM_position = 0;
	if(++PWM_position>=PWM_PERIOD){
  90:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  94:	8f 5f       	subi	r24, 0xFF	; 255
  96:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  9a:	84 31       	cpi	r24, 0x14	; 20
  9c:	10 f0       	brcs	.+4      	; 0xa2 <PWM_soft_update+0x12>
		PWM_position = 0;
  9e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(PWM_position<PWM_DELTA){
  a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a6:	83 31       	cpi	r24, 0x13	; 19
  a8:	20 f4       	brcc	.+8      	; 0xb2 <PWM_soft_update+0x22>
		PWM_ON;
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	08 95       	ret
		} else {
		PWM_OFF;
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	8f 7d       	andi	r24, 0xDF	; 223
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	08 95       	ret

000000ba <__vector_14>:
	}
}

// INTERRUPTION
ISR(TIMER0_COMPA_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	PWM_soft_update();
  dc:	0e 94 48 00 	call	0x90	; 0x90 <PWM_soft_update>
}
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	bf 91       	pop	r27
  e6:	af 91       	pop	r26
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	7f 91       	pop	r23
  ee:	6f 91       	pop	r22
  f0:	5f 91       	pop	r21
  f2:	4f 91       	pop	r20
  f4:	3f 91       	pop	r19
  f6:	2f 91       	pop	r18
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <main>:

int main(void){
	
	DDRB |= (1<<PORTB5) | (1<<PORTB2) | (1<<PORTB1);
 102:	84 b1       	in	r24, 0x04	; 4
 104:	86 62       	ori	r24, 0x26	; 38
 106:	84 b9       	out	0x04, r24	; 4
	
	TCCR0A |= (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
 108:	84 b5       	in	r24, 0x24	; 36
 10a:	83 68       	ori	r24, 0x83	; 131
 10c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) | (1<<CS00);
 10e:	85 b5       	in	r24, 0x25	; 37
 110:	83 60       	ori	r24, 0x03	; 3
 112:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;
 114:	89 ef       	ldi	r24, 0xF9	; 249
 116:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1<<OCIE0A);
 118:	ee e6       	ldi	r30, 0x6E	; 110
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	80 83       	st	Z, r24
	sei();
 122:	78 94       	sei
 124:	ff cf       	rjmp	.-2      	; 0x124 <main+0x22>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
