
tp4-ent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b55  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ad  00000000  00000000  00000f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000590  00000000  00000000  000017f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045e  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ed  00000000  00000000  00002356  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002543  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 81 00 	call	0x102	; 0x102 <main>
  88:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
#include "adc.h"

void ADC_init() {
	// Habilitar el ADC y configurar el preescalador a 64 (125 kHz a 8 MHz de frecuencia de reloj).
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	86 68       	ori	r24, 0x86	; 134
  98:	80 83       	st	Z, r24
	
	// Configurar la referencia de voltaje del ADC a AVCC con ajuste a la derecha.
	ADMUX |=  (0 << REFS1) | (1 << REFS0);
  9a:	ec e7       	ldi	r30, 0x7C	; 124
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);
  a4:	80 81       	ld	r24, Z
  a6:	8f 7d       	andi	r24, 0xDF	; 223
  a8:	80 83       	st	Z, r24
  aa:	08 95       	ret

000000ac <ADC_read>:
	
}

uint16_t ADC_read(uint8_t channel) {
	// Seleccionar el canal 3 del ADC (PIN A3).
	ADMUX &= 0xF0; // Limpiar los bits MUX4:0 para configurarlos en 0.
  ac:	ec e7       	ldi	r30, 0x7C	; 124
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	80 83       	st	Z, r24
	ADMUX |= 0x03; // Establecer los bits MUX4:0 en 011 para seleccionar el canal 3 (PIN A3).
  b6:	80 81       	ld	r24, Z
  b8:	83 60       	ori	r24, 0x03	; 3
  ba:	80 83       	st	Z, r24

	// Iniciar una conversión ADC.
	ADCSRA |= (1 << ADSC);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24

	// Esperar hasta que se complete la conversión.
	while ((ADCSRA & (1 << ADIF))==0);
  c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ca:	84 ff       	sbrs	r24, 4
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <ADC_read+0x1a>
	
	//Limpia el flag ADIF
	ADCSRA |= (1<<ADIF);
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	80 83       	st	Z, r24

	// Leer y retornar el resultado de la conversión.
	uint8_t lowByte = ADCL;
  d8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	uint8_t highByte = ADCH;
  dc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	uint16_t valorADC = (highByte << 8) | lowByte;
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	98 2f       	mov	r25, r24
  e4:	88 27       	eor	r24, r24
	contiene los 2 bits más significativos de la conversión de 10 bits, mientras que el valor de ADCL contiene los 8 bits menos significativos. 
	Estos dos valores se combinan para obtener el resultado de la conversión de 10 bits.
	*/
	
	
}
  e6:	82 2b       	or	r24, r18
  e8:	08 95       	ret

000000ea <RGB_setBrightness>:

#include "rgb.h"
#include "adc.h"

void RGB_setBrightness() {
	uint16_t adc_value = ADC_read(3); // Leer valor del potenciómetro conectado al ADC3 (PC3)
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	0e 94 56 00 	call	0xac	; 0xac <ADC_read>
	uint8_t brightness = adc_value / 4; // Escalar el valor ADC (0-1023) a PWM (0-255)
  f0:	96 95       	lsr	r25
  f2:	87 95       	ror	r24
  f4:	96 95       	lsr	r25
  f6:	87 95       	ror	r24
	// if 62

	RGB_setColor(brightness, 255, 255); // Establecer brillo para todos los colores
  f8:	4f ef       	ldi	r20, 0xFF	; 255
  fa:	6f ef       	ldi	r22, 0xFF	; 255
  fc:	0e 94 0d 01 	call	0x21a	; 0x21a <RGB_setColor>
 100:	08 95       	ret

00000102 <main>:
	
}


int main(void){
	DDRC = 0x00;
 102:	17 b8       	out	0x07, r1	; 7
	RGB_init();
 104:	0e 94 0a 01 	call	0x214	; 0x214 <RGB_init>
	sei();
 108:	78 94       	sei
	
	ADC_init();
 10a:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	RGB_setColor(255,100,255);
 10e:	4f ef       	ldi	r20, 0xFF	; 255
 110:	64 e6       	ldi	r22, 0x64	; 100
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	0e 94 0d 01 	call	0x21a	; 0x21a <RGB_setColor>
	// gbr
	
	
	while(1){
		//_delay_us(100);
		RGB_setBrightness();
 118:	0e 94 75 00 	call	0xea	; 0xea <RGB_setBrightness>
 11c:	fd cf       	rjmp	.-6      	; 0x118 <main+0x16>

0000011e <PWM_init>:
volatile uint8_t green_duty = 0;
volatile uint8_t blue_duty = 0;

void PWM_init() {
	
	PWM_START(RED_PIN);
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	80 62       	ori	r24, 0x20	; 32
 122:	84 b9       	out	0x04, r24	; 4
	PWM_START(GREEN_PIN);
 124:	84 b1       	in	r24, 0x04	; 4
 126:	82 60       	ori	r24, 0x02	; 2
 128:	84 b9       	out	0x04, r24	; 4
	PWM_START(BLUE_PIN);
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	84 60       	ori	r24, 0x04	; 4
 12e:	84 b9       	out	0x04, r24	; 4
	
	TCCR0A |= (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
 130:	84 b5       	in	r24, 0x24	; 36
 132:	83 68       	ori	r24, 0x83	; 131
 134:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01);
 136:	85 b5       	in	r24, 0x25	; 37
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 59;
 13c:	8b e3       	ldi	r24, 0x3B	; 59
 13e:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1<<OCIE0A);
 140:	ee e6       	ldi	r30, 0x6E	; 110
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	82 60       	ori	r24, 0x02	; 2
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <PWM_setDutyCycle>:
}

void PWM_setDutyCycle(uint8_t pin, uint8_t dutyCycle) {
	if (pin == RED_PIN) {
 14c:	85 30       	cpi	r24, 0x05	; 5
 14e:	19 f4       	brne	.+6      	; 0x156 <PWM_setDutyCycle+0xa>
		red_duty = dutyCycle;
 150:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <red_duty>
 154:	08 95       	ret
		} else if (pin == GREEN_PIN) {
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	19 f4       	brne	.+6      	; 0x160 <PWM_setDutyCycle+0x14>
		green_duty = dutyCycle;
 15a:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <green_duty>
 15e:	08 95       	ret
		} else if (pin == BLUE_PIN) {
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	11 f4       	brne	.+4      	; 0x168 <PWM_setDutyCycle+0x1c>
		blue_duty = dutyCycle;
 164:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <blue_duty>
 168:	08 95       	ret

0000016a <PWM_soft_update>:
	}
}

void PWM_soft_update() {
	static uint8_t PWM_position = 0;
	if (++PWM_position >= PWM_PERIOD) {
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	86 39       	cpi	r24, 0x96	; 150
 176:	10 f0       	brcs	.+4      	; 0x17c <PWM_soft_update+0x12>
		PWM_position = 0;
 178:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}

	// Update RED_PIN
	if (PWM_position < red_duty) {
 17c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 180:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <red_duty>
 184:	98 17       	cp	r25, r24
 186:	20 f4       	brcc	.+8      	; 0x190 <PWM_soft_update+0x26>
		PWM_ON(RED_PIN);
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	80 62       	ori	r24, 0x20	; 32
 18c:	85 b9       	out	0x05, r24	; 5
 18e:	03 c0       	rjmp	.+6      	; 0x196 <PWM_soft_update+0x2c>
		} else {
		PWM_OFF(RED_PIN);
 190:	85 b1       	in	r24, 0x05	; 5
 192:	8f 7d       	andi	r24, 0xDF	; 223
 194:	85 b9       	out	0x05, r24	; 5
	}

	// Update GREEN_PIN
	if (PWM_position < green_duty) {
 196:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <green_duty>
 19e:	98 17       	cp	r25, r24
 1a0:	20 f4       	brcc	.+8      	; 0x1aa <PWM_soft_update+0x40>
		PWM_ON(GREEN_PIN);
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	85 b9       	out	0x05, r24	; 5
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <PWM_soft_update+0x46>
		} else {
		PWM_OFF(GREEN_PIN);
 1aa:	85 b1       	in	r24, 0x05	; 5
 1ac:	8d 7f       	andi	r24, 0xFD	; 253
 1ae:	85 b9       	out	0x05, r24	; 5
	}

	// Update BLUE_PIN
	if (PWM_position < blue_duty) {
 1b0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <blue_duty>
 1b8:	98 17       	cp	r25, r24
 1ba:	20 f4       	brcc	.+8      	; 0x1c4 <PWM_soft_update+0x5a>
		PWM_ON(BLUE_PIN);
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	84 60       	ori	r24, 0x04	; 4
 1c0:	85 b9       	out	0x05, r24	; 5
 1c2:	08 95       	ret
		} else {
		PWM_OFF(BLUE_PIN);
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	8b 7f       	andi	r24, 0xFB	; 251
 1c8:	85 b9       	out	0x05, r24	; 5
 1ca:	08 95       	ret

000001cc <__vector_14>:
	}
}

// ISR for Timer0 compare match
ISR(TIMER0_COMPA_vect) {
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	PWM_soft_update();
 1ee:	0e 94 b5 00 	call	0x16a	; 0x16a <PWM_soft_update>
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <RGB_init>:
#include "rgb.h"
#include "pwm.h"

void RGB_init() {
	PWM_init();
 214:	0e 94 8f 00 	call	0x11e	; 0x11e <PWM_init>
 218:	08 95       	ret

0000021a <RGB_setColor>:
}

void RGB_setColor(uint8_t red, uint8_t green, uint8_t blue) {
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	c8 2f       	mov	r28, r24
 220:	d6 2f       	mov	r29, r22
	PWM_setDutyCycle(PORTB2, blue);
 222:	64 2f       	mov	r22, r20
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0e 94 a6 00 	call	0x14c	; 0x14c <PWM_setDutyCycle>
	PWM_setDutyCycle(PORTB1, green);
 22a:	6d 2f       	mov	r22, r29
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 a6 00 	call	0x14c	; 0x14c <PWM_setDutyCycle>
	PWM_setDutyCycle(PORTB5, red);
 232:	6c 2f       	mov	r22, r28
 234:	85 e0       	ldi	r24, 0x05	; 5
 236:	0e 94 a6 00 	call	0x14c	; 0x14c <PWM_setDutyCycle>
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
