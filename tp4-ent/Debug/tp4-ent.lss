
tp4-ent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  000004a2  00000536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  00800166  00800166  0000059c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001462  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c21  00000000  00000000  00001c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b5b  00000000  00000000  00002837  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  00003394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000759  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000817  00000000  00000000  00003e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000046a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_18>
  4c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e6       	ldi	r26, 0x66	; 102
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3d       	cpi	r26, 0xD8	; 216
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  9e:	0c 94 4f 02 	jmp	0x49e	; 0x49e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
#include "adc.h"

void ADC_init() 
{
	// Habilitar el ADC y configurar el preescalador a 64 (125 kHz a 8 MHz de frecuencia de reloj).
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 68       	ori	r24, 0x86	; 134
  ae:	80 83       	st	Z, r24
	// Configurar la referencia de voltaje del ADC a AVCC con ajuste a la derecha.
	ADMUX |=  (0 << REFS1) | (1 << REFS0);
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);
  ba:	80 81       	ld	r24, Z
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel) 
{
	// Seleccionar el canal 3 del ADC (PIN A3).
	ADMUX &= 0xF0; // Limpiar los bits MUX4:0 para configurarlos en 0.
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	80 83       	st	Z, r24
	ADMUX |= 0x03; // Establecer los bits MUX4:0 en 011 para seleccionar el canal 3 (PIN A3).
  cc:	80 81       	ld	r24, Z
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	80 83       	st	Z, r24

	// Iniciar una conversion ADC.
	ADCSRA |= (1 << ADSC);
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24

	// Esperar hasta que se complete la conversion.
	while ((ADCSRA & (1 << ADIF))==0);
  dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e0:	84 ff       	sbrs	r24, 4
  e2:	fc cf       	rjmp	.-8      	; 0xdc <ADC_read+0x1a>
	
	//Limpia el flag ADIF
	ADCSRA |= (1<<ADIF);
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	80 83       	st	Z, r24

	// Leer y retornar el resultado de la conversion.
	uint8_t lowByte = ADCL;
  ee:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	uint8_t highByte = ADCH;
  f2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	uint16_t valorADC = (highByte << 8) | lowByte;
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	98 2f       	mov	r25, r24
  fa:	88 27       	eor	r24, r24
	return valorADC;
}
  fc:	82 2b       	or	r24, r18
  fe:	08 95       	ret

00000100 <RGB_setBrightness>:
static char bienvenida[] = "Controlador RGB \n\r Ingrese R, G o B para cambiar la intensidad del color seleccionado \n\r ";

// Function to set brightness based on ADC reading
uint8_t RGB_setBrightness() 
{
	uint16_t adc_value = ADC_read(3); // Leer valor del potenciometro conectado al ADC3 (PC3)
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_read>
	uint8_t brightness = adc_value / 4; // Escalar el valor ADC (0-1023) a PWM (0-255)
 106:	96 95       	lsr	r25
 108:	87 95       	ror	r24
 10a:	96 95       	lsr	r25
 10c:	87 95       	ror	r24
	return brightness;
}
 10e:	08 95       	ret

00000110 <processCommand>:

// Function to process UART command and set corresponding color
void processCommand(char channel) 
{
	switch (channel) {
 110:	87 34       	cpi	r24, 0x47	; 71
 112:	51 f0       	breq	.+20     	; 0x128 <processCommand+0x18>
 114:	82 35       	cpi	r24, 0x52	; 82
 116:	19 f0       	breq	.+6      	; 0x11e <processCommand+0xe>
 118:	82 34       	cpi	r24, 0x42	; 66
 11a:	81 f4       	brne	.+32     	; 0x13c <processCommand+0x2c>
 11c:	0a c0       	rjmp	.+20     	; 0x132 <processCommand+0x22>
		case 'R':
		UART_sendString("R");
 11e:	8a e5       	ldi	r24, 0x5A	; 90
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 d7 01 	call	0x3ae	; 0x3ae <UART_sendString>
		break;
 126:	08 95       	ret
		case 'G':
		UART_sendString("G");
 128:	8c e5       	ldi	r24, 0x5C	; 92
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <UART_sendString>
		break;
 130:	08 95       	ret
		case 'B':
		UART_sendString("B");
 132:	8e e5       	ldi	r24, 0x5E	; 94
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 d7 01 	call	0x3ae	; 0x3ae <UART_sendString>
		break;
 13a:	08 95       	ret
		default:
		UART_sendString("N");
 13c:	80 e6       	ldi	r24, 0x60	; 96
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 d7 01 	call	0x3ae	; 0x3ae <UART_sendString>
 144:	08 95       	ret

00000146 <main>:
	}
}

int main(void)
{
	DDRC = 0x00; // Set PORTC as input
 146:	17 b8       	out	0x07, r1	; 7
	UART_init();
 148:	0e 94 cd 01 	call	0x39a	; 0x39a <UART_init>
	RGB_init();
 14c:	0e 94 67 01 	call	0x2ce	; 0x2ce <RGB_init>
	ADC_init();
 150:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	sei(); // Enable global interrupts
 154:	78 94       	sei

	// Initial RGB color setup
	RGB_setRed();
 156:	0e 94 90 01 	call	0x320	; 0x320 <RGB_setRed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	81 ee       	ldi	r24, 0xE1	; 225
 15e:	94 e0       	ldi	r25, 0x04	; 4
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x1a>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x24>
 16a:	00 00       	nop
	_delay_ms(100);
	RGB_setGreen();
 16c:	0e 94 96 01 	call	0x32c	; 0x32c <RGB_setGreen>
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	81 ee       	ldi	r24, 0xE1	; 225
 174:	94 e0       	ldi	r25, 0x04	; 4
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x30>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x3a>
 180:	00 00       	nop
	_delay_ms(100);
	RGB_setBlue();
 182:	0e 94 9c 01 	call	0x338	; 0x338 <RGB_setBlue>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	81 ee       	ldi	r24, 0xE1	; 225
 18a:	94 e0       	ldi	r25, 0x04	; 4
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x46>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x50>
 196:	00 00       	nop
	_delay_ms(100);
	RGB_setColor(255, 255, 255);
 198:	4f ef       	ldi	r20, 0xFF	; 255
 19a:	6f ef       	ldi	r22, 0xFF	; 255
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <RGB_setColor>

	// Send welcome message
	UART_sendString(bienvenida);
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <UART_sendString>

	char channel = 'R'; // Default channel
 1aa:	c2 e5       	ldi	r28, 0x52	; 82
	uint8_t brightness;

	while(1)
	{
		if (UART_hayComando()) 
 1ac:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <UART_hayComando>
 1b0:	88 23       	and	r24, r24
 1b2:	59 f0       	breq	.+22     	; 0x1ca <main+0x84>
		{
			channel = UART_getComando();
 1b4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <UART_getComando>
 1b8:	c8 2f       	mov	r28, r24
			processCommand(channel);
 1ba:	0e 94 88 00 	call	0x110	; 0x110 <processCommand>
			UART_sendString("\n\r");
 1be:	82 e6       	ldi	r24, 0x62	; 98
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <UART_sendString>
			UART_setHayComando();
 1c6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_setHayComando>
		}
		brightness = RGB_setBrightness();
 1ca:	0e 94 80 00 	call	0x100	; 0x100 <RGB_setBrightness>
		RGB_setSingleColor(channel, brightness);
 1ce:	68 2f       	mov	r22, r24
 1d0:	8c 2f       	mov	r24, r28
 1d2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <RGB_setSingleColor>
	}
 1d6:	ea cf       	rjmp	.-44     	; 0x1ac <main+0x66>

000001d8 <PWM_init>:
volatile uint8_t green_duty = 0;
volatile uint8_t blue_duty = 0;

void PWM_init() {
	
	PWM_START(RED_PIN);
 1d8:	84 b1       	in	r24, 0x04	; 4
 1da:	80 62       	ori	r24, 0x20	; 32
 1dc:	84 b9       	out	0x04, r24	; 4
	PWM_START(GREEN_PIN);
 1de:	84 b1       	in	r24, 0x04	; 4
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	84 b9       	out	0x04, r24	; 4
	PWM_START(BLUE_PIN);
 1e4:	84 b1       	in	r24, 0x04	; 4
 1e6:	84 60       	ori	r24, 0x04	; 4
 1e8:	84 b9       	out	0x04, r24	; 4
	
	TCCR0A |= (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
 1ea:	84 b5       	in	r24, 0x24	; 36
 1ec:	83 68       	ori	r24, 0x83	; 131
 1ee:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01);
 1f0:	85 b5       	in	r24, 0x25	; 37
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	85 bd       	out	0x25, r24	; 37
	OCR0A = 59;
 1f6:	8b e3       	ldi	r24, 0x3B	; 59
 1f8:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1<<OCIE0A);
 1fa:	ee e6       	ldi	r30, 0x6E	; 110
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	82 60       	ori	r24, 0x02	; 2
 202:	80 83       	st	Z, r24
 204:	08 95       	ret

00000206 <PWM_setDutyCycle>:
}

void PWM_setDutyCycle(uint8_t pin, uint8_t dutyCycle) {
	if (pin == RED_PIN) {
 206:	85 30       	cpi	r24, 0x05	; 5
 208:	19 f4       	brne	.+6      	; 0x210 <PWM_setDutyCycle+0xa>
		red_duty = dutyCycle;
 20a:	60 93 69 01 	sts	0x0169, r22	; 0x800169 <red_duty>
 20e:	08 95       	ret
		} else if (pin == GREEN_PIN) {
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	19 f4       	brne	.+6      	; 0x21a <PWM_setDutyCycle+0x14>
		green_duty = dutyCycle;
 214:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <green_duty>
 218:	08 95       	ret
		} else if (pin == BLUE_PIN) {
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	11 f4       	brne	.+4      	; 0x222 <PWM_setDutyCycle+0x1c>
		blue_duty = dutyCycle;
 21e:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <blue_duty>
 222:	08 95       	ret

00000224 <PWM_soft_update>:
	}
}

void PWM_soft_update() {
	static uint8_t PWM_position = 0;
	if (++PWM_position >= PWM_PERIOD) {
 224:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
 22e:	86 39       	cpi	r24, 0x96	; 150
 230:	10 f0       	brcs	.+4      	; 0x236 <PWM_soft_update+0x12>
		PWM_position = 0;
 232:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <__data_end>
	}

	// Update RED_PIN
	if (PWM_position < red_duty) {
 236:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <__data_end>
 23a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <red_duty>
 23e:	98 17       	cp	r25, r24
 240:	20 f4       	brcc	.+8      	; 0x24a <PWM_soft_update+0x26>
		PWM_ON(RED_PIN);
 242:	85 b1       	in	r24, 0x05	; 5
 244:	80 62       	ori	r24, 0x20	; 32
 246:	85 b9       	out	0x05, r24	; 5
 248:	03 c0       	rjmp	.+6      	; 0x250 <PWM_soft_update+0x2c>
		} else {
		PWM_OFF(RED_PIN);
 24a:	85 b1       	in	r24, 0x05	; 5
 24c:	8f 7d       	andi	r24, 0xDF	; 223
 24e:	85 b9       	out	0x05, r24	; 5
	}

	// Update GREEN_PIN
	if (PWM_position < green_duty) {
 250:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <__data_end>
 254:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <green_duty>
 258:	98 17       	cp	r25, r24
 25a:	20 f4       	brcc	.+8      	; 0x264 <PWM_soft_update+0x40>
		PWM_ON(GREEN_PIN);
 25c:	85 b1       	in	r24, 0x05	; 5
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	85 b9       	out	0x05, r24	; 5
 262:	03 c0       	rjmp	.+6      	; 0x26a <PWM_soft_update+0x46>
		} else {
		PWM_OFF(GREEN_PIN);
 264:	85 b1       	in	r24, 0x05	; 5
 266:	8d 7f       	andi	r24, 0xFD	; 253
 268:	85 b9       	out	0x05, r24	; 5
	}

	// Update BLUE_PIN
	if (PWM_position < blue_duty) {
 26a:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <__data_end>
 26e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <blue_duty>
 272:	98 17       	cp	r25, r24
 274:	20 f4       	brcc	.+8      	; 0x27e <PWM_soft_update+0x5a>
		PWM_ON(BLUE_PIN);
 276:	85 b1       	in	r24, 0x05	; 5
 278:	84 60       	ori	r24, 0x04	; 4
 27a:	85 b9       	out	0x05, r24	; 5
 27c:	08 95       	ret
		} else {
		PWM_OFF(BLUE_PIN);
 27e:	85 b1       	in	r24, 0x05	; 5
 280:	8b 7f       	andi	r24, 0xFB	; 251
 282:	85 b9       	out	0x05, r24	; 5
 284:	08 95       	ret

00000286 <__vector_14>:
	}
}

// ISR for Timer0 compare match
ISR(TIMER0_COMPA_vect) {
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	2f 93       	push	r18
 292:	3f 93       	push	r19
 294:	4f 93       	push	r20
 296:	5f 93       	push	r21
 298:	6f 93       	push	r22
 29a:	7f 93       	push	r23
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
 2a0:	af 93       	push	r26
 2a2:	bf 93       	push	r27
 2a4:	ef 93       	push	r30
 2a6:	ff 93       	push	r31
	PWM_soft_update();
 2a8:	0e 94 12 01 	call	0x224	; 0x224 <PWM_soft_update>
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <RGB_init>:
#include "rgb.h"
#include "pwm.h"

void RGB_init() 
{
	PWM_init();
 2ce:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <PWM_init>
 2d2:	08 95       	ret

000002d4 <RGB_setColor>:
}

void RGB_setColor(uint8_t red, uint8_t green, uint8_t blue) 
{
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	c8 2f       	mov	r28, r24
 2da:	d6 2f       	mov	r29, r22
	PWM_setDutyCycle(PORTB2, blue);
 2dc:	64 2f       	mov	r22, r20
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 03 01 	call	0x206	; 0x206 <PWM_setDutyCycle>
	PWM_setDutyCycle(PORTB1, green);
 2e4:	6d 2f       	mov	r22, r29
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 03 01 	call	0x206	; 0x206 <PWM_setDutyCycle>
	PWM_setDutyCycle(PORTB5, red);
 2ec:	6c 2f       	mov	r22, r28
 2ee:	85 e0       	ldi	r24, 0x05	; 5
 2f0:	0e 94 03 01 	call	0x206	; 0x206 <PWM_setDutyCycle>
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <RGB_setSingleColor>:

void RGB_setSingleColor(char color, uint8_t duty) 
{
	switch (color)
 2fa:	87 34       	cpi	r24, 0x47	; 71
 2fc:	49 f0       	breq	.+18     	; 0x310 <RGB_setSingleColor+0x16>
 2fe:	82 35       	cpi	r24, 0x52	; 82
 300:	19 f0       	breq	.+6      	; 0x308 <RGB_setSingleColor+0xe>
 302:	82 34       	cpi	r24, 0x42	; 66
 304:	61 f4       	brne	.+24     	; 0x31e <RGB_setSingleColor+0x24>
 306:	08 c0       	rjmp	.+16     	; 0x318 <RGB_setSingleColor+0x1e>
	{
		case 'R':
		PWM_setDutyCycle(PORTB5, duty);
 308:	85 e0       	ldi	r24, 0x05	; 5
 30a:	0e 94 03 01 	call	0x206	; 0x206 <PWM_setDutyCycle>
		break;
 30e:	08 95       	ret
		case 'G':
		PWM_setDutyCycle(PORTB2, duty);
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	0e 94 03 01 	call	0x206	; 0x206 <PWM_setDutyCycle>
		break;
 316:	08 95       	ret
		case 'B':
		PWM_setDutyCycle(PORTB1, duty);
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 03 01 	call	0x206	; 0x206 <PWM_setDutyCycle>
 31e:	08 95       	ret

00000320 <RGB_setRed>:
	}
}

void RGB_setRed() 
{
	RGB_setColor(120, 0, 0);
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	88 e7       	ldi	r24, 0x78	; 120
 326:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <RGB_setColor>
 32a:	08 95       	ret

0000032c <RGB_setGreen>:
}

void RGB_setGreen() 
{
	RGB_setColor(0, 120, 0);
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	68 e7       	ldi	r22, 0x78	; 120
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <RGB_setColor>
 336:	08 95       	ret

00000338 <RGB_setBlue>:
}

void RGB_setBlue() 
{
	RGB_setColor(0, 0, 120);
 338:	48 e7       	ldi	r20, 0x78	; 120
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <RGB_setColor>
 342:	08 95       	ret

00000344 <SerialPort_Init>:

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
}
 344:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 348:	96 e0       	ldi	r25, 0x06	; 6
 34a:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 34e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 352:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 356:	08 95       	ret

00000358 <SerialPort_TX_Enable>:
 358:	e1 ec       	ldi	r30, 0xC1	; 193
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	88 60       	ori	r24, 0x08	; 8
 360:	80 83       	st	Z, r24
 362:	08 95       	ret

00000364 <SerialPort_TX_Interrupt_Enable>:
 364:	e1 ec       	ldi	r30, 0xC1	; 193
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	80 62       	ori	r24, 0x20	; 32
 36c:	80 83       	st	Z, r24
 36e:	08 95       	ret

00000370 <SerialPort_TX_Interrupt_Disable>:
 370:	e1 ec       	ldi	r30, 0xC1	; 193
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	8f 7d       	andi	r24, 0xDF	; 223
 378:	80 83       	st	Z, r24
 37a:	08 95       	ret

0000037c <SerialPort_RX_Enable>:
 37c:	e1 ec       	ldi	r30, 0xC1	; 193
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	80 61       	ori	r24, 0x10	; 16
 384:	80 83       	st	Z, r24
 386:	08 95       	ret

00000388 <SerialPort_RX_Interrupt_Enable>:
 388:	e1 ec       	ldi	r30, 0xC1	; 193
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	80 83       	st	Z, r24
 392:	08 95       	ret

00000394 <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 394:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 398:	08 95       	ret

0000039a <UART_init>:
volatile unsigned char nuevoDato = 0;

static int nuevoComando = 0;

void UART_init(){
	SerialPort_Init(0x67); // inicializar puerto serie
 39a:	87 e6       	ldi	r24, 0x67	; 103
 39c:	0e 94 a2 01 	call	0x344	; 0x344 <SerialPort_Init>
	SerialPort_TX_Enable(); // habilitar transmisor TX
 3a0:	0e 94 ac 01 	call	0x358	; 0x358 <SerialPort_TX_Enable>
	SerialPort_RX_Enable(); // habilitar receptor RX
 3a4:	0e 94 be 01 	call	0x37c	; 0x37c <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable(); // habilitar interrupciones de recepci�n
 3a8:	0e 94 c4 01 	call	0x388	; 0x388 <SerialPort_RX_Interrupt_Enable>
 3ac:	08 95       	ret

000003ae <UART_sendString>:
}

void UART_sendString(char* s){
 3ae:	ac 01       	movw	r20, r24
	unsigned char indice = 0;
 3b0:	20 e0       	ldi	r18, 0x00	; 0
	while(s[indice] != '\0'){ // Mientras no llegue al fin de la cadena
 3b2:	0d c0       	rjmp	.+26     	; 0x3ce <UART_sendString+0x20>
		if(TX_indiceescritura < 105){ // si el �ndice es menor al tama�o m�ximo del buffer
 3b4:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <TX_indiceescritura>
 3b8:	99 36       	cpi	r25, 0x69	; 105
 3ba:	40 f4       	brcc	.+16     	; 0x3cc <UART_sendString+0x1e>
			TX_Buffer[TX_indiceescritura] = s[indice]; // Guardar car�cter en buffer
 3bc:	e9 2f       	mov	r30, r25
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	e3 59       	subi	r30, 0x93	; 147
 3c2:	fe 4f       	sbci	r31, 0xFE	; 254
 3c4:	30 83       	st	Z, r19
			TX_indiceescritura++;
 3c6:	9f 5f       	subi	r25, 0xFF	; 255
 3c8:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <TX_indiceescritura>
		}
		indice++;
 3cc:	2f 5f       	subi	r18, 0xFF	; 255
	SerialPort_RX_Interrupt_Enable(); // habilitar interrupciones de recepci�n
}

void UART_sendString(char* s){
	unsigned char indice = 0;
	while(s[indice] != '\0'){ // Mientras no llegue al fin de la cadena
 3ce:	fa 01       	movw	r30, r20
 3d0:	e2 0f       	add	r30, r18
 3d2:	f1 1d       	adc	r31, r1
 3d4:	30 81       	ld	r19, Z
 3d6:	31 11       	cpse	r19, r1
 3d8:	ed cf       	rjmp	.-38     	; 0x3b4 <UART_sendString+0x6>
			TX_Buffer[TX_indiceescritura] = s[indice]; // Guardar car�cter en buffer
			TX_indiceescritura++;
		}
		indice++;
	}
	hayString = 1; // Activo flag
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <hayString>
	SerialPort_TX_Interrupt_Enable(); // Activo interrupci�n de transmisi�n
 3e0:	0e 94 b2 01 	call	0x364	; 0x364 <SerialPort_TX_Interrupt_Enable>
 3e4:	08 95       	ret

000003e6 <UART_hayComando>:
}

char UART_hayComando(){
	return nuevoDato; // Retorna si hay un nuevo dato recibido
 3e6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <nuevoDato>
}
 3ea:	08 95       	ret

000003ec <UART_setHayComando>:

void UART_setHayComando(){
	nuevoDato = 0; // Resetear bandera de nuevo dato
 3ec:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <nuevoDato>
 3f0:	08 95       	ret

000003f2 <UART_getComando>:
}

char UART_getComando(){
	return RX_Buffer; // Retorna el car�cter recibido
 3f2:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <RX_Buffer>
}
 3f6:	08 95       	ret

000003f8 <__vector_18>:

ISR(USART_RX_vect){
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	8f 93       	push	r24
	RX_Buffer = UDR0; // Leer el dato recibido
 404:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 408:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <RX_Buffer>
	nuevoDato = 1; // Indicar que hay un nuevo dato
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <nuevoDato>
}
 412:	8f 91       	pop	r24
 414:	0f 90       	pop	r0
 416:	0f be       	out	0x3f, r0	; 63
 418:	0f 90       	pop	r0
 41a:	1f 90       	pop	r1
 41c:	18 95       	reti

0000041e <__vector_19>:

ISR(USART_UDRE_vect){
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	2f 93       	push	r18
 42a:	3f 93       	push	r19
 42c:	4f 93       	push	r20
 42e:	5f 93       	push	r21
 430:	6f 93       	push	r22
 432:	7f 93       	push	r23
 434:	8f 93       	push	r24
 436:	9f 93       	push	r25
 438:	af 93       	push	r26
 43a:	bf 93       	push	r27
 43c:	ef 93       	push	r30
 43e:	ff 93       	push	r31
	if(hayString){ // Si hay cadena para transmitir
 440:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <hayString>
 444:	88 23       	and	r24, r24
 446:	d1 f0       	breq	.+52     	; 0x47c <__vector_19+0x5e>
		if (TX_indicelectura < TX_indiceescritura){ // Si sigue habiendo datos
 448:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <TX_indicelectura>
 44c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <TX_indiceescritura>
 450:	e8 17       	cp	r30, r24
 452:	60 f4       	brcc	.+24     	; 0x46c <__vector_19+0x4e>
			SerialPort_Send_Data(TX_Buffer[TX_indicelectura]); // Enviar dato
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	e3 59       	subi	r30, 0x93	; 147
 458:	fe 4f       	sbci	r31, 0xFE	; 254
 45a:	80 81       	ld	r24, Z
 45c:	0e 94 ca 01 	call	0x394	; 0x394 <SerialPort_Send_Data>
			TX_indicelectura++;
 460:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <TX_indicelectura>
 464:	8f 5f       	subi	r24, 0xFF	; 255
 466:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <TX_indicelectura>
 46a:	08 c0       	rjmp	.+16     	; 0x47c <__vector_19+0x5e>
		}
		else {
			hayString = 0; // Termino de transmitir
 46c:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <hayString>
			TX_indicelectura = 0;
 470:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <TX_indicelectura>
			TX_indiceescritura = 0;
 474:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <TX_indiceescritura>
			SerialPort_TX_Interrupt_Disable(); // Deshabilitar interrupci�n de transmisi�n
 478:	0e 94 b8 01 	call	0x370	; 0x370 <SerialPort_TX_Interrupt_Disable>
		}
	}
}
 47c:	ff 91       	pop	r31
 47e:	ef 91       	pop	r30
 480:	bf 91       	pop	r27
 482:	af 91       	pop	r26
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	7f 91       	pop	r23
 48a:	6f 91       	pop	r22
 48c:	5f 91       	pop	r21
 48e:	4f 91       	pop	r20
 490:	3f 91       	pop	r19
 492:	2f 91       	pop	r18
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <_exit>:
 49e:	f8 94       	cli

000004a0 <__stop_program>:
 4a0:	ff cf       	rjmp	.-2      	; 0x4a0 <__stop_program>
